name: Project Scout Main Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  # Disabled Azure ML Pipeline job - no longer needed
  deploy-azure-ml-pipeline:
    name: Deploy Azure ML Pipeline
    runs-on: ubuntu-latest
    if: false  # Disabled - Azure ML no longer required
    steps:
      - name: Placeholder step
        run: echo "Azure ML Pipeline deployment is disabled"

  # Fixed SQL Migrations job
  deploy-sql-migrations:
    name: Deploy SQL Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SQL Command Line Tools
        run: |
          # Import the Microsoft GPG key
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          
          # Register the Microsoft Ubuntu repository
          sudo add-apt-repository "$(curl -sSL https://packages.microsoft.com/config/ubuntu/20.04/prod.list)"
          
          # Update the package list and install mssql-tools
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          
          # Add sqlcmd to PATH
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $GITHUB_ENV

      - name: Run SQL migrations
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
          SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        run: |
          # Create connection string
          CONNECTION_STRING="Server=$SQL_SERVER;Database=$SQL_DATABASE;User ID=$SQL_USERNAME;Password=$SQL_PASSWORD;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
          
          # Find all migration files and execute them in order
          for migration in $(find ./migrations -name "*.sql" | sort); do
            echo "Executing migration: $migration"
            /opt/mssql-tools/bin/sqlcmd -S "$SQL_SERVER" -d "$SQL_DATABASE" -U "$SQL_USERNAME" -P "$SQL_PASSWORD" -i "$migration" -I
          done

  # Unit tests job
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd tools/js
          npm ci

      - name: Run tests
        run: |
          cd tools/js
          npm test

  # Deploy to Azure Static Web Apps
  deploy-dashboard:
    name: Deploy Dashboard to Azure
    runs-on: ubuntu-latest
    needs: [deploy-sql-migrations, unit-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install and build
        run: |
          cd tools/js/final-locked-dashboard/scout_dlt_pipeline/client360_dashboard
          npm ci
          npm run build || echo "No build script found"

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "tools/js/final-locked-dashboard/scout_dlt_pipeline/client360_dashboard/deploy"
          api_location: ""
          output_location: ""
          skip_app_build: true

  # Post-deployment validation
  post-deployment-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deploy-dashboard
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment to propagate
        run: sleep 30

      - name: Validate deployment
        run: |
          DASHBOARD_URL="https://proud-forest-0224c7a0f.6.azurestaticapps.net"
          
          # Check if the dashboard is accessible
          if curl -f -s "$DASHBOARD_URL" > /dev/null; then
            echo "‚úÖ Dashboard is accessible at $DASHBOARD_URL"
          else
            echo "‚ùå Dashboard is not accessible"
            exit 1
          fi
          
          # Check for key files
          for file in "index.html" "js/dashboard.js" "staticwebapp.config.json"; do
            if curl -f -s "$DASHBOARD_URL/$file" > /dev/null; then
              echo "‚úÖ $file is accessible"
            else
              echo "‚ùå $file is missing"
              exit 1
            fi
          done

  # Notify deployment status
  notify-status:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dashboard, post-deployment-validation]
    if: always()
    steps:
      - name: Notify success
        if: needs.post-deployment-validation.result == 'success'
        run: |
          echo "üöÄ Deployment successful!"
          echo "Dashboard URL: https://proud-forest-0224c7a0f.6.azurestaticapps.net"

      - name: Notify failure
        if: needs.post-deployment-validation.result == 'failure' || needs.deploy-dashboard.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for details"
          exit 1