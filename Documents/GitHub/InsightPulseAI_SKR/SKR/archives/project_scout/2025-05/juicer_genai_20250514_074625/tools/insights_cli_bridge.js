/**
 * Insights CLI Bridge
 * 
 * This utility bridges Pulser CLI commands with the Juicer Insights dashboard,
 * enabling programmatic access to insights data and visualizations.
 * 
 * @author InsightPulseAI Team
 * @version 1.0
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * Configuration for the insights CLI bridge
 */
const config = {
  dashboardPath: path.join(__dirname, '../dashboards/insights_dashboard.html'),
  notebookPath: '/juicer/juicer_gold_insights',
  defaultTimeRange: '30d',
  defaultModel: 'claude',
  outputDir: path.join(__dirname, '../output'),
  dbUtilsPath: path.join(__dirname, '../../config/superset_connection.js')
};

/**
 * Handles insights generation via CLI
 * @param {Object} options - Command options
 * @param {string} options.days - Number of days to analyze
 * @param {string} options.model - LLM model to use
 * @param {boolean} options.dashboard - Whether to generate dashboard
 * @returns {Object} Result object
 */
function generateInsights(options = {}) {
  const days = options.days || '7';
  const model = options.model || config.defaultModel;
  const dashboard = options.dashboard !== false;
  
  console.log(`Generating insights for the last ${days} days using ${model}...`);
  
  try {
    // In a real implementation, this would execute a Databricks notebook
    // For demo purposes, we'll simulate the notebook execution
    const result = simulateNotebookExecution(days, model, dashboard);
    
    console.log(`✅ Successfully generated ${result.insightCount} insights`);
    return {
      success: true,
      insightCount: result.insightCount,
      message: `Generated ${result.insightCount} insights with an average confidence of ${result.avgConfidence}%`,
      data: result
    };
  } catch (error) {
    console.error(`❌ Error generating insights: ${error.message}`);
    return {
      success: false,
      message: `Error generating insights: ${error.message}`
    };
  }
}

/**
 * Displays generated insights via CLI
 * @param {Object} options - Command options
 * @param {string} options.type - Insight type filter
 * @param {string} options.brand - Brand filter
 * @param {number} options.limit - Maximum results to show
 * @returns {Object} Result object
 */
function showInsights(options = {}) {
  const type = options.type || 'all';
  const brand = options.brand || null;
  const limit = options.limit || 10;
  
  console.log(`Showing ${type} insights${brand ? ` for ${brand}` : ''}...`);
  
  try {
    // In a real implementation, this would query the Platinum layer
    // For demo purposes, we'll use sample data
    const insights = getSampleInsights().filter(insight => {
      if (type !== 'all' && insight.insight_type !== type) return false;
      if (brand && (!insight.brands_mentioned || !insight.brands_mentioned.includes(brand))) return false;
      return true;
    }).slice(0, limit);
    
    if (insights.length === 0) {
      console.log('No insights found matching your criteria.');
      return {
        success: true,
        insightCount: 0,
        message: 'No insights found matching your criteria.'
      };
    }
    
    // Format insights for CLI display
    insights.forEach(insight => {
      console.log('\n' + '='.repeat(80));
      console.log(`[${insight.insight_type.toUpperCase()}] ${insight.insight_title}`);
      console.log('-'.repeat(80));
      console.log(insight.insight_text);
      console.log('\nBrands:', insight.brands_mentioned.join(', '));
      console.log('Tags:', insight.summary_tags.join(', '));
      console.log(`Confidence: ${Math.round(insight.confidence_score * 100)}%`);
      console.log('Generated by:', insight.generated_by);
      console.log('='.repeat(80));
    });
    
    return {
      success: true,
      insightCount: insights.length,
      message: `Displayed ${insights.length} insights.`,
      data: insights
    };
  } catch (error) {
    console.error(`❌ Error displaying insights: ${error.message}`);
    return {
      success: false,
      message: `Error displaying insights: ${error.message}`
    };
  }
}

/**
 * Launches the insights dashboard
 * @param {Object} options - Command options
 * @param {string} options.port - HTTP port to use
 * @returns {Object} Result object
 */
function launchDashboard(options = {}) {
  const port = options.port || 9090;
  
  console.log(`Launching insights dashboard on port ${port}...`);
  
  try {
    // In a real implementation, this would start a web server
    // For demo purposes, we'll just check if the file exists
    if (!fs.existsSync(config.dashboardPath)) {
      throw new Error(`Dashboard file not found at ${config.dashboardPath}`);
    }
    
    // Simulate dashboard launch command
    const launchCommand = `open http://localhost:${port}/insights-dashboard`;
    console.log(`✅ Execute to open dashboard: ${launchCommand}`);
    
    return {
      success: true,
      message: `Dashboard available at http://localhost:${port}/insights-dashboard`,
      command: launchCommand
    };
  } catch (error) {
    console.error(`❌ Error launching dashboard: ${error.message}`);
    return {
      success: false,
      message: `Error launching dashboard: ${error.message}`
    };
  }
}

/**
 * Generates a visualization based on insights data
 * @param {Object} options - Command options
 * @param {string} options.type - Chart type
 * @param {string} options.group - Grouping dimension
 * @param {string} options.output - Output file path
 * @returns {Object} Result object
 */
function visualizeInsights(options = {}) {
  const type = options.type || 'bar';
  const group = options.group || 'brand';
  const output = options.output || path.join(config.outputDir, `insights_${type}_by_${group}.png`);
  
  console.log(`Generating ${type} chart grouped by ${group}...`);
  
  try {
    // Create output directory if it doesn't exist
    const outputDir = path.dirname(output);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // In a real implementation, this would generate a chart file
    // For demo purposes, we'll just create a placeholder file
    fs.writeFileSync(output, `Simulated ${type} chart by ${group}`);
    
    console.log(`✅ Visualization saved to ${output}`);
    return {
      success: true,
      message: `Visualization saved to ${output}`,
      filepath: output
    };
  } catch (error) {
    console.error(`❌ Error generating visualization: ${error.message}`);
    return {
      success: false,
      message: `Error generating visualization: ${error.message}`
    };
  }
}

/**
 * Simulates executing a notebook for demo purposes
 * @private
 */
function simulateNotebookExecution(days, model, generateDashboard) {
  // Simulate notebook execution delay
  console.log(`Executing notebook ${config.notebookPath}...`);
  
  // In a real implementation, this would make an API call to Databricks
  // For demo purposes, we'll simulate the notebook output
  const insightCount = Math.floor(Math.random() * 50) + 50; // 50-100 insights
  const avgConfidence = Math.floor(Math.random() * 15) + 75; // 75-90% confidence
  
  return {
    insightCount,
    avgConfidence,
    model,
    days,
    generateDashboard,
    timestamp: new Date().toISOString()
  };
}

/**
 * Gets sample insights data for demo purposes
 * @private
 */
function getSampleInsights() {
  return [
    {
      insight_id: 'ins_001',
      insight_type: 'general',
      insight_title: 'Increasing focus on value meals across all demographics',
      insight_text: 'Analysis of 327 transcripts reveals that 64% of customers mention value when discussing meal options. This represents an increasing trend compared to previous periods.',
      confidence_score: 0.85,
      brands_mentioned: ['Jollibee', 'McDonald\'s', 'KFC'],
      summary_tags: ['pricing', 'value', 'economy', 'family'],
      generated_by: 'claude',
      processing_timestamp: '2025-05-02T10:30:00Z'
    },
    {
      insight_id: 'ins_002',
      insight_type: 'brand',
      insight_title: 'Brand loyalty stronger for customers using rewards programs',
      insight_text: 'Data from recent interactions shows Jollibee is frequently associated with loyalty programs, with 78% of mentions having positive sentiment.',
      confidence_score: 0.92,
      brands_mentioned: ['Jollibee'],
      summary_tags: ['loyalty', 'rewards', 'app', 'repeat'],
      generated_by: 'openai',
      processing_timestamp: '2025-05-03T14:45:00Z'
    },
    {
      insight_id: 'ins_003',
      insight_type: 'sentiment',
      insight_title: 'Positive sentiment toward expanded vegetarian options',
      insight_text: 'A recurring theme in 32% of analyzed conversations is the connection between vegetarian menu options and positive sentiment.',
      confidence_score: 0.76,
      brands_mentioned: ['KFC', 'Burger King'],
      summary_tags: ['vegetarian', 'health', 'menu', 'alternatives'],
      generated_by: 'claude',
      processing_timestamp: '2025-05-05T09:15:00Z'
    },
    {
      insight_id: 'ins_004',
      insight_type: 'trend',
      insight_title: 'Rising preference for breakfast items throughout the day',
      insight_text: 'Analysis of 215 transcripts reveals a growing customer demand for breakfast items to be available throughout the day, with 47% of customers expressing this preference.',
      confidence_score: 0.88,
      brands_mentioned: ['McDonald\'s', 'Jollibee', 'Wendy\'s'],
      summary_tags: ['breakfast', 'all-day', 'menu', 'convenience'],
      generated_by: 'deepseek',
      processing_timestamp: '2025-05-04T16:20:00Z'
    }
  ];
}

// Export functions for CLI use
module.exports = {
  generateInsights,
  showInsights,
  launchDashboard,
  visualizeInsights
};

// CLI handler
if (require.main === module) {
  // Parse command line arguments
  const args = process.argv.slice(2);
  const command = args[0];
  
  // Extract options
  const options = {};
  for (let i = 1; i < args.length; i += 2) {
    if (args[i].startsWith('--') && i + 1 < args.length) {
      const key = args[i].slice(2);
      const value = args[i + 1];
      options[key] = value;
    }
  }
  
  // Execute appropriate function based on command
  let result;
  switch (command) {
    case 'generate':
      result = generateInsights(options);
      break;
    case 'show':
      result = showInsights(options);
      break;
    case 'dashboard':
      result = launchDashboard(options);
      break;
    case 'visualize':
      result = visualizeInsights(options);
      break;
    default:
      console.error(`Unknown command: ${command}`);
      console.log('Available commands: generate, show, dashboard, visualize');
      process.exit(1);
  }
  
  // Output result status
  process.exit(result.success ? 0 : 1);
}