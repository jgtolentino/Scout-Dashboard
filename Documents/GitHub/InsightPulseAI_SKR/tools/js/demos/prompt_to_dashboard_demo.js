#!/usr/bin/env node

/**
 * Prompt to Dashboard Demo
 * 
 * Demonstrates the PromptEngineer to DashboardBuilder agent chaining workflow
 * by improving a dashboard prompt and then generating a dashboard from it.
 * 
 * Usage:
 *   node prompt_to_dashboard_demo.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Required directories
const DEMO_DIR = path.join(__dirname);
const OUTPUT_DIR = path.join(__dirname, '../output/visualsynth');

// Create output directory if it doesn't exist
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

// Sample dashboard prompt
const initialPrompt = `Design a retail dashboard showing sales trends`;

// Step 1: Simulate the prompt_engineer improve command
console.log('üîç STEP 1: Improving the prompt with PromptEngineer agent');
console.log(`üîπ Initial prompt: "${initialPrompt}"`);

// This would be the actual agent output in production
const improvedPrompt = `Design a retail dashboard showing sales trends by product category over time, with KPIs for total revenue, average order value, and conversion rate. Include regional comparison and top-performing SKUs.`;

console.log(`‚úÖ Improved prompt: "${improvedPrompt}"`);
console.log();

// Step 2: Extract structured requirements from the prompt
console.log('üîç STEP 2: Extracting dashboard requirements');

// This would be extracted by the reqparser component
const extractedRequirements = {
  title: "Retail Analytics Dashboard",
  description: "Sales trends by product category with key performance indicators",
  kpis: [
    { name: "Total Revenue", metric: "sum_revenue", format: "currency" },
    { name: "Average Order Value", metric: "avg_order_value", format: "currency" },
    { name: "Conversion Rate", metric: "conversion_rate", format: "percent" }
  ],
  charts: [
    { title: "Sales by Category", type: "bar", metric: "sales_by_category" },
    { title: "Sales Trend", type: "line", metric: "sales_over_time" },
    { title: "Regional Comparison", type: "bar", metric: "sales_by_region" }
  ],
  tables: [
    { title: "Top Performing SKUs", columns: ["sku", "name", "brand", "units", "sales"] }
  ]
};

const reqsPath = path.join(OUTPUT_DIR, 'requirements.json');
fs.writeFileSync(reqsPath, JSON.stringify(extractedRequirements, null, 2));
console.log(`‚úÖ Requirements extracted and saved to ${reqsPath}`);
console.log();

// Step 3: Convert requirements to dashboard wireframe
console.log('üîç STEP 3: Generating dashboard wireframe');

// This would be generated by the schemainfer component
const dashboardWireframe = {
  title: "Retail Analytics Dashboard",
  description: "Sales trends by product category with key performance indicators",
  layout: [
    {
      type: "header",
      content: {
        title: "Retail Analytics Dashboard",
        subtitle: "Sales trends by product category with key performance indicators",
        filters: ["date_range", "region", "store"]
      }
    },
    {
      type: "row",
      content: [
        {
          type: "kpi_card",
          title: "Total Revenue",
          metric: "sum_revenue",
          format: "currency",
          comparison: true
        },
        {
          type: "kpi_card",
          title: "Average Order Value",
          metric: "avg_order_value",
          format: "currency",
          comparison: true
        },
        {
          type: "kpi_card",
          title: "Conversion Rate",
          metric: "conversion_rate",
          format: "percent",
          comparison: true
        }
      ]
    },
    {
      type: "chart",
      title: "Sales by Category",
      chart_type: "bar",
      metric: "sales_by_category",
      width: 6
    },
    {
      type: "chart",
      title: "Sales Trend",
      chart_type: "line",
      metric: "sales_over_time",
      width: 6
    },
    {
      type: "chart",
      title: "Regional Comparison",
      chart_type: "bar",
      metric: "sales_by_region",
      width: 6
    },
    {
      type: "table",
      title: "Top Performing SKUs",
      columns: [
        { field: "sku", label: "SKU" },
        { field: "name", label: "Product" },
        { field: "brand", label: "Brand" },
        { field: "units", label: "Units Sold" },
        { field: "sales", label: "Revenue" }
      ],
      width: 6
    }
  ]
};

const wireframePath = path.join(OUTPUT_DIR, 'dashboard_wireframe.json');
fs.writeFileSync(wireframePath, JSON.stringify(dashboardWireframe, null, 2));
console.log(`‚úÖ Dashboard wireframe generated and saved to ${wireframePath}`);
console.log();

// Step 4: Create a simple schema mapping file
console.log('üîç STEP 4: Creating KPI table mapping');

const schemaMapping = {
  kpis: {
    sum_revenue: { table: "sales", column: "revenue", aggregation: "sum" },
    avg_order_value: { table: "orders", column: "value", aggregation: "avg" },
    conversion_rate: { table: "visits", formula: "purchases / visits * 100" }
  },
  charts: {
    sales_by_category: { table: "products", dimensions: ["category"], metrics: ["revenue"] },
    sales_over_time: { table: "sales", dimensions: ["date"], metrics: ["revenue"] },
    sales_by_region: { table: "stores", dimensions: ["region"], metrics: ["revenue"] }
  }
};

const mappingPath = path.join(OUTPUT_DIR, 'kpi_table_mapping.yaml');
fs.writeFileSync(mappingPath, JSON.stringify(schemaMapping, null, 2));
console.log(`‚úÖ KPI mapping created and saved to ${mappingPath}`);
console.log();

// Step 5: Generate the dashboard using visualsynth_code_generator
console.log('üîç STEP 5: Generating dashboard with VisualSynth');

try {
  // Prepare output HTML path
  const dashboardHtmlPath = path.join(OUTPUT_DIR, 'retail_dashboard.html');
  
  // Get the path to the visualsynth_code_generator.js file
  const generatorPath = path.join(__dirname, '../utils/visualsynth_code_generator.js');
  
  // Execute the generator with appropriate parameters
  const command = `node "${generatorPath}" "${wireframePath}" "${mappingPath}" "tbwa" "${dashboardHtmlPath}"`;
  
  console.log(`Executing: ${command}`);
  execSync(command, { stdio: 'inherit' });
  
  console.log(`‚úÖ Dashboard generated and saved to ${dashboardHtmlPath}`);
  console.log();
  
  // Prepare a QA report to simulate the QA process
  const qaReport = {
    timestamp: new Date().toISOString(),
    prompt: improvedPrompt,
    requirements: extractedRequirements,
    validations: [
      { name: "KPI Count", expected: 3, actual: 3, passed: true },
      { name: "Chart Count", expected: 3, actual: 3, passed: true },
      { name: "Table Count", expected: 1, actual: 1, passed: true },
      { name: "Responsive Layout", passed: true },
      { name: "TBWA Theme Compliance", passed: true }
    ],
    recommendation: "The dashboard meets all requirements and is ready for deployment."
  };
  
  const qaReportPath = path.join(OUTPUT_DIR, 'qa_report.json');
  fs.writeFileSync(qaReportPath, JSON.stringify(qaReport, null, 2));
  
  console.log('‚úÖ QA process completed successfully');
  console.log(`‚úÖ QA report saved to ${qaReportPath}`);
  console.log();
  
  // Save the input prompt for reference
  fs.writeFileSync(path.join(OUTPUT_DIR, 'input.txt'), improvedPrompt);
  
  // Step 6: Simulate dashboard registration with Kalaw
  console.log('üîç STEP 6: Registering dashboard with Kalaw');
  
  // This would be handled by Kalaw in production
  const deploymentLog = {
    timestamp: new Date().toISOString(),
    dashboardId: `dash_${Date.now()}`,
    prompt: improvedPrompt,
    traceId: `trace_${Date.now()}`,
    sourceSchema: "kpi_table_mapping.yaml",
    outputPath: "retail_dashboard.html",
    tags: ["clarity-checked", "ab-tested", "persona-matched"],
    creator: "PromptEngineer ‚Üí DashboardBuilder"
  };
  
  const deploymentLogPath = path.join(OUTPUT_DIR, 'deployment_log.json');
  fs.writeFileSync(deploymentLogPath, JSON.stringify(deploymentLog, null, 2));
  
  console.log(`‚úÖ Dashboard registered with Kalaw`);
  console.log(`‚úÖ Deployment log saved to ${deploymentLogPath}`);
  console.log();
  
  console.log('‚ú® Demo completed successfully! ‚ú®');
  console.log(`To view the dashboard, open: ${dashboardHtmlPath}`);
  
} catch (error) {
  console.error('‚ùå Error generating dashboard:', error.message);
  process.exit(1);
}