#!/usr/bin/env python3
"""
Pulser PRD Generator
--------------------
Generate structured Product Requirements Documents (PRD) for InsightPulseAI projects.
Output in both Markdown and YAML formats for compatibility with various AI development workflows.
"""

import os
import yaml
import datetime
from pathlib import Path
try:
    from rich import print
    from rich.console import Console
    from rich.panel import Panel
    from rich.prompt import Prompt
    from rich.markdown import Markdown
    RICH_AVAILABLE = True
except ImportError:
    print("Rich library not found. Installing basic version...")
    RICH_AVAILABLE = False

# Configuration
DEFAULT_OUTPUT_DIR = os.path.dirname(os.path.abspath(__file__))
VERSION = "1.0.0"

# Define the fields to prompt the user for
FIELDS = {
    "product_name": "What is the name of your product?",
    "problem": "What problem are you solving?",
    "audience": "Who is the target user?",
    "features": "List the core features (comma-separated)",
    "ai_role": "How does AI factor into the experience?",
    "constraints": "What should the agent NOT do?",
    "data_sources": "Any data sources or APIs needed?",
    "success": "How will you measure success?",
    "launch": "Is this an MVP, test, or full launch?",
}

def display_banner():
    """Display a fancy banner if Rich is available"""
    if RICH_AVAILABLE:
        console = Console()
        console.print(Panel.fit(
            "[bold cyan]Pulser PRD Generator[/bold cyan] [dim]v{0}[/dim]\n"
            "[yellow]Generate structured product requirements documents[/yellow]".format(VERSION),
            border_style="cyan"
        ))
    else:
        print(f"Pulser PRD Generator v{VERSION}")
        print("Generate structured product requirements documents")
        print("-" * 50)

def gather_input():
    """Prompt the user for PRD fields"""
    output = {}
    
    display_banner()
    print("Please answer the following questions to generate your PRD.\n")
    
    # Current date
    current_date = datetime.datetime.now().strftime("%Y-%m-%d")
    output["creation_date"] = current_date
    
    # Gather inputs for each field
    for key, question in FIELDS.items():
        if RICH_AVAILABLE:
            value = Prompt.ask(f"[bold cyan]{question}[/]")
        else:
            value = input(f"{question}: ")
        
        # Process lists from comma-separated input
        if key == "features":
            output[key] = [item.strip() for item in value.split(",")]
        else:
            output[key] = value
    
    # Add metadata
    output["generated_by"] = "Pulser PRD Generator"
    output["version"] = "1.0"
    
    return output

def generate_markdown(data):
    """Generate a markdown representation of the PRD"""
    md_content = f"# PRD: {data['product_name']}\n\n"
    md_content += f"*Generated: {data['creation_date']}*\n\n"
    
    # Add each section
    md_content += "## Problem Statement\n"
    md_content += f"{data['problem']}\n\n"
    
    md_content += "## Target Audience\n"
    md_content += f"{data['audience']}\n\n"
    
    md_content += "## Core Features\n"
    if isinstance(data['features'], list):
        for feature in data['features']:
            md_content += f"- {feature}\n"
    else:
        md_content += f"{data['features']}\n"
    md_content += "\n"
    
    md_content += "## AI Integration\n"
    md_content += f"{data['ai_role']}\n\n"
    
    md_content += "## Constraints / Must-Nots\n"
    md_content += f"{data['constraints']}\n\n"
    
    md_content += "## Data Sources / APIs\n"
    md_content += f"{data['data_sources']}\n\n"
    
    md_content += "## Success Criteria\n"
    md_content += f"{data['success']}\n\n"
    
    md_content += "## Launch Context\n"
    md_content += f"{data['launch']}\n\n"
    
    md_content += "---\n"
    md_content += f"*Generated by Pulser PRD Generator v{VERSION}*"
    
    return md_content

def save_files(data):
    """Save the PRD as both Markdown and YAML files"""
    project_name = data["product_name"].lower().replace(" ", "_")
    path = Path(DEFAULT_OUTPUT_DIR) / f"prd_{project_name}"
    
    # Ensure parent directory exists
    path.parent.mkdir(exist_ok=True)
    
    # Save Markdown
    with open(path.with_suffix(".md"), "w") as f:
        f.write(generate_markdown(data))
    
    # Save YAML
    with open(path.with_suffix(".yaml"), "w") as f:
        yaml.dump(data, f, default_flow_style=False, sort_keys=False)
    
    return path

def display_success(filepath):
    """Show success message with file locations"""
    md_path = filepath.with_suffix(".md")
    yaml_path = filepath.with_suffix(".yaml")
    
    if RICH_AVAILABLE:
        console = Console()
        console.print("\n[bold green]✓ PRD successfully generated![/bold green]\n")
        console.print(f"[cyan]Markdown file:[/cyan] {md_path}")
        console.print(f"[cyan]YAML file:[/cyan] {yaml_path}")
        
        # Preview the markdown
        console.print("\n[yellow]Preview:[/yellow]")
        with open(md_path, "r") as f:
            md = Markdown(f.read())
            console.print(md)
    else:
        print("\n✓ PRD successfully generated!\n")
        print(f"Markdown file: {md_path}")
        print(f"YAML file: {yaml_path}")
        print("\nPreview the files to see your PRD.")

def main():
    """Main function to run the PRD generator"""
    # Gather input from user
    prd_data = gather_input()
    
    # Save the PRD files
    filepath = save_files(prd_data)
    
    # Display success message
    display_success(filepath)

if __name__ == "__main__":
    main()