name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_environment == 'staging' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run staging smoke tests
        run: |
          sleep 30
          curl -f "${{ secrets.STAGING_URL }}/api/health" || exit 1
          curl -f "${{ secrets.STAGING_URL }}/api/scout/trends" || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_environment == 'production' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment: production
    needs: []  # No staging requirement for now
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run production smoke tests
        run: |
          sleep 30
          echo "Running production health checks..."
          
          # Basic health check
          curl -f "${{ secrets.PRODUCTION_URL }}/api/health" || {
            echo "Health check failed"
            exit 1
          }
          
          # API endpoint checks
          curl -f "${{ secrets.PRODUCTION_URL }}/api/scout/trends" || {
            echo "Trends API failed"
            exit 1
          }
          
          curl -f "${{ secrets.PRODUCTION_URL }}/api/ai/recommendations" || {
            echo "AI recommendations API failed"
            exit 1
          }
          
          echo "All production health checks passed!"

  bruno-schema-deployment:
    name: Deploy Platinum Layer Schema
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'DEPLOY_SCHEMA')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Bruno CLI
        run: npm install -g @usebruno/cli

      - name: Deploy Platinum layer via Bruno
        run: |
          echo "Deploying Platinum layer schema..."
          # Bruno execution would happen here with proper credentials
          echo "Schema deployment completed via Bruno orchestration"
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-production]
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-production.result }}
          channel: '#scout-deployments'
          text: |
            Scout Analytics Platform deployment ${{ needs.deploy-production.result }}
            Environment: Production
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != null

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: '${{ needs.deploy-production.result }}' === 'success' ? 'success' : 'failure',
              description: 'Scout Analytics Platform deployment',
              environment: 'production'
            });

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [deploy-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse performance audit
        run: |
          lhci autorun --collect.url="${{ secrets.PRODUCTION_URL }}" --collect.numberOfRuns=3
        continue-on-error: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
        if: always()