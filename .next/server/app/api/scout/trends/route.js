"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/scout/trends/route";
exports.ids = ["app/api/scout/trends/route"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@15.0.0-rc.0_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fscout%2Ftrends%2Froute&page=%2Fapi%2Fscout%2Ftrends%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fscout%2Ftrends%2Froute.ts&appDir=%2FUsers%2Ftbwa%2Fscout-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftbwa%2Fscout-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/.pnpm/next@15.0.0-rc.0_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fscout%2Ftrends%2Froute&page=%2Fapi%2Fscout%2Ftrends%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fscout%2Ftrends%2Froute.ts&appDir=%2FUsers%2Ftbwa%2Fscout-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftbwa%2Fscout-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/.pnpm/next@15.0.0-rc.0_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/.pnpm/next@15.0.0-rc.0_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/.pnpm/next@15.0.0-rc.0_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_tbwa_scout_dashboard_app_api_scout_trends_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/scout/trends/route.ts */ \"(rsc)/./app/api/scout/trends/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/scout/trends/route\",\n        pathname: \"/api/scout/trends\",\n        filename: \"route\",\n        bundlePath: \"app/api/scout/trends/route\"\n    },\n    resolvedPagePath: \"/Users/tbwa/scout-dashboard/app/api/scout/trends/route.ts\",\n    nextConfigOutput,\n    userland: _Users_tbwa_scout_dashboard_app_api_scout_trends_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/scout/trends/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNS4wLjAtcmMuMF9yZWFjdC1kb21AMTkuMS4xX3JlYWN0QDE5LjEuMV9fcmVhY3RAMTkuMS4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtYXBwLWxvYWRlci5qcz9uYW1lPWFwcCUyRmFwaSUyRnNjb3V0JTJGdHJlbmRzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZzY291dCUyRnRyZW5kcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnNjb3V0JTJGdHJlbmRzJTJGcm91dGUudHMmYXBwRGlyPSUyRlVzZXJzJTJGdGJ3YSUyRnNjb3V0LWRhc2hib2FyZCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZ0YndhJTJGc2NvdXQtZGFzaGJvYXJkJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNTO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2NvdXQtZGFzaGJvYXJkLW5leHRqcy8/MjU3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvdGJ3YS9zY291dC1kYXNoYm9hcmQvYXBwL2FwaS9zY291dC90cmVuZHMvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3Njb3V0L3RyZW5kcy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Njb3V0L3RyZW5kc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvc2NvdXQvdHJlbmRzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL3Rid2Evc2NvdXQtZGFzaGJvYXJkL2FwcC9hcGkvc2NvdXQvdHJlbmRzL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9zY291dC90cmVuZHMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@15.0.0-rc.0_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fscout%2Ftrends%2Froute&page=%2Fapi%2Fscout%2Ftrends%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fscout%2Ftrends%2Froute.ts&appDir=%2FUsers%2Ftbwa%2Fscout-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftbwa%2Fscout-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/scout/trends/route.ts":
/*!***************************************!*\
  !*** ./app/api/scout/trends/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/.pnpm/next@15.0.0-rc.0_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_analytics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/analytics */ \"(rsc)/./lib/services/analytics.ts\");\n/* harmony import */ var _lib_utils_validation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/utils/validation */ \"(rsc)/./lib/utils/validation.ts\");\n\n\n\nasync function GET(req) {\n    try {\n        const { searchParams } = new URL(req.url);\n        // Parse and validate query parameters\n        const rawFilters = {\n            dateFrom: searchParams.get(\"from\"),\n            dateTo: searchParams.get(\"to\"),\n            regions: searchParams.get(\"regions\"),\n            provinces: searchParams.get(\"provinces\"),\n            stores: searchParams.get(\"stores\"),\n            brands: searchParams.get(\"brands\"),\n            categories: searchParams.get(\"categories\")\n        };\n        const rawPagination = {\n            limit: searchParams.get(\"limit\"),\n            offset: searchParams.get(\"offset\")\n        };\n        // Validate input parameters\n        const filterValidation = (0,_lib_utils_validation__WEBPACK_IMPORTED_MODULE_2__.validateTransactionFilters)(rawFilters);\n        const paginationValidation = (0,_lib_utils_validation__WEBPACK_IMPORTED_MODULE_2__.validatePagination)(rawPagination);\n        if (!filterValidation.isValid) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid filter parameters\",\n                details: filterValidation.errors\n            }, {\n                status: 400\n            });\n        }\n        if (!paginationValidation.isValid) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid pagination parameters\",\n                details: paginationValidation.errors\n            }, {\n                status: 400\n            });\n        }\n        // Apply defaults for missing filters\n        const filters = {\n            dateFrom: \"2024-01-01\",\n            dateTo: \"2025-12-31\",\n            ...filterValidation.sanitized\n        };\n        const analyticsService = new _lib_services_analytics__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        const result = await analyticsService.getDashboardData(\"transaction-trends\", filters, false);\n        if (result.error) {\n            console.error(\"Analytics service error:\", result.error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to fetch trends data\",\n                message: result.error\n            }, {\n                status: 500\n            });\n        }\n        const trendsData = result.data?.trends || [];\n        const { limit = 100, offset = 0 } = paginationValidation.sanitized;\n        const paginatedData = trendsData.slice(offset, offset + limit);\n        // Return trends data in expected format with enhanced metadata\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            rows: paginatedData,\n            meta: {\n                filters_applied: Object.keys(filters).filter((key)=>filters[key] !== undefined && filters[key] !== null),\n                total_records: trendsData.length,\n                returned_records: paginatedData.length,\n                pagination: {\n                    limit,\n                    offset,\n                    has_more: offset + limit < trendsData.length\n                },\n                generated_at: new Date().toISOString()\n            }\n        });\n    } catch (error) {\n        console.error(\"API error:\", error);\n        const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\",\n            message: errorMessage,\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/scout/trends/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/dal/ai.ts":
/*!***********************!*\
  !*** ./lib/dal/ai.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(rsc)/./lib/dal/base.ts\");\n/**\n * AI/LLM Data Access Layer\n * Handles AI-powered analytics, insights, and chat functionality\n */ \nclass AIDAL extends _base__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n   * Store and retrieve chat messages\n   */ async storeChatMessage(message) {\n        return this.executeQuery(async (client)=>{\n            const { data, error } = await client.from('platinum.chat_messages').insert([\n                message\n            ]).select().single();\n            return {\n                data,\n                error\n            };\n        });\n    }\n    async getChatHistory(conversationId, limit = 50) {\n        const cacheKey = `chat_history_${conversationId}`;\n        return this.executeQuery(async (client)=>{\n            const { data, error } = await client.from('platinum.chat_messages').select('*').eq('conversation_id', conversationId).order('created_at', {\n                ascending: true\n            }).limit(limit);\n            return {\n                data,\n                error\n            };\n        }, cacheKey, 60000 // 1 minute cache for chat\n        );\n    }\n    /**\n   * Generate AI insights from transaction data\n   */ async generateInsights(params) {\n        const cacheKey = `insights_${JSON.stringify(params)}`;\n        return this.executeQuery(async (client)=>{\n            // First, get the data context for AI analysis\n            const contextQuery = this.buildContextQuery(params);\n            const { data: contextData, error: contextError } = await client.rpc('get_ai_context', {\n                analysis_type: params.analysisType,\n                filters: params.filters || {},\n                timeframe: params.timeframe || '30d'\n            });\n            if (contextError) {\n                return {\n                    data: null,\n                    error: contextError\n                };\n            }\n            // For now, generate rule-based insights\n            // In production, this would call OpenAI/Anthropic APIs\n            const insights = this.generateRuleBasedInsights(contextData, params);\n            // Store insights for tracking\n            const { error: storeError } = await client.from('platinum.ai_insights').insert(insights.map((insight)=>({\n                    ...insight,\n                    created_at: new Date().toISOString(),\n                    analysis_params: params\n                })));\n            if (storeError) {\n                console.warn('Failed to store insights:', storeError);\n            }\n            return {\n                data: insights,\n                error: null\n            };\n        }, cacheKey, 600000 // 10 minutes cache\n        );\n    }\n    /**\n   * Get AI-powered recommendations\n   */ async getRecommendations(section, userContext = {}) {\n        const cacheKey = `recommendations_${section}_${JSON.stringify(userContext)}`;\n        return this.executeQuery(async (client)=>{\n            // Get recent performance data for recommendations\n            const { data: performanceData, error: perfError } = await client.rpc('get_recommendation_context', {\n                section,\n                user_context: userContext\n            });\n            if (perfError) {\n                return {\n                    data: null,\n                    error: perfError\n                };\n            }\n            // Generate contextual recommendations\n            const recommendations = this.generateRecommendations(section, performanceData, userContext);\n            return {\n                data: recommendations,\n                error: null\n            };\n        }, cacheKey, 300000 // 5 minutes cache\n        );\n    }\n    /**\n   * Perform semantic search across transaction data and insights\n   */ async semanticSearch(query, filters = {}) {\n        const cacheKey = `semantic_${query}_${JSON.stringify(filters)}`;\n        return this.executeQuery(async (client)=>{\n            // Use PostgreSQL full-text search for now\n            // In production, this would use vector embeddings\n            const { data, error } = await client.rpc('semantic_search', {\n                search_query: query,\n                filters: filters,\n                limit: 20\n            });\n            return {\n                data,\n                error\n            };\n        }, cacheKey, 300000 // 5 minutes cache\n        );\n    }\n    /**\n   * Detect anomalies in transaction patterns\n   */ async detectAnomalies(metric = 'sales', timeframe = '7d', sensitivity = 2.0) {\n        const cacheKey = `anomalies_${metric}_${timeframe}_${sensitivity}`;\n        return this.executeQuery(async (client)=>{\n            const { data, error } = await client.rpc('detect_anomalies', {\n                metric_name: metric,\n                time_window: timeframe,\n                sensitivity_threshold: sensitivity\n            });\n            return {\n                data,\n                error\n            };\n        }, cacheKey, 600000 // 10 minutes cache\n        );\n    }\n    /**\n   * Generate predictions for business metrics\n   */ async generatePredictions(metrics, forecastDays = 30) {\n        const cacheKey = `predictions_${metrics.join(',')}_${forecastDays}`;\n        return this.executeQuery(async (client)=>{\n            // Simple linear regression for now\n            // In production, use more sophisticated ML models\n            const predictions = [];\n            for (const metric of metrics){\n                const { data: historicalData, error } = await client.from('v_trends_daily').select(`day, ${metric}`).order('day', {\n                    ascending: false\n                }).limit(90) // Use 90 days for trend analysis\n                ;\n                if (error) continue;\n                const forecast = this.generateLinearForecast(historicalData, metric, forecastDays);\n                predictions.push({\n                    metric,\n                    forecast,\n                    confidence: this.calculateForecastConfidence(historicalData)\n                });\n            }\n            return {\n                data: predictions,\n                error: null\n            };\n        }, cacheKey, 1800000 // 30 minutes cache\n        );\n    }\n    /**\n   * Process natural language query for dashboard insights\n   */ async processNaturalLanguageQuery(query, context) {\n        try {\n            // Parse intent from query\n            const intent = this.parseQueryIntent(query);\n            // Generate appropriate response based on intent\n            let response;\n            switch(intent.type){\n                case 'data_request':\n                    response = await this.handleDataRequest(intent, context);\n                    break;\n                case 'analysis_request':\n                    response = await this.handleAnalysisRequest(intent, context);\n                    break;\n                case 'comparison_request':\n                    response = await this.handleComparisonRequest(intent, context);\n                    break;\n                default:\n                    response = await this.handleGeneralQuery(query, context);\n            }\n            return {\n                data: response,\n                error: null\n            };\n        } catch (error) {\n            return {\n                data: null,\n                error: error.message\n            };\n        }\n    }\n    // Private helper methods\n    buildContextQuery(params) {\n        // Build SQL query based on analysis parameters\n        const baseQuery = `\n      SELECT \n        DATE_TRUNC('day', timestamp) as date,\n        COUNT(*) as transactions,\n        SUM(peso_value) as revenue,\n        AVG(peso_value) as avg_order_value,\n        COUNT(DISTINCT store_id) as unique_stores\n      FROM transactions\n      WHERE timestamp >= NOW() - INTERVAL '${params.timeframe || '30d'}'\n    `;\n        if (params.filters) {\n            // Add filter conditions\n            Object.entries(params.filters).forEach(([key, value])=>{\n                if (Array.isArray(value)) {\n                    baseQuery + ` AND ${key} = ANY($${value})`;\n                } else {\n                    baseQuery + ` AND ${key} = '${value}'`;\n                }\n            });\n        }\n        return baseQuery + ' GROUP BY DATE_TRUNC(\\'day\\', timestamp) ORDER BY date';\n    }\n    generateRuleBasedInsights(data, params) {\n        const insights = [];\n        if (params.analysisType === 'trends') {\n            // Detect trend patterns\n            if (data.length >= 7) {\n                const recentWeek = data.slice(-7);\n                const previousWeek = data.slice(-14, -7);\n                const recentAvg = recentWeek.reduce((sum, d)=>sum + d.revenue, 0) / recentWeek.length;\n                const previousAvg = previousWeek.reduce((sum, d)=>sum + d.revenue, 0) / previousWeek.length;\n                const changePercent = (recentAvg - previousAvg) / previousAvg * 100;\n                insights.push({\n                    id: `trend_${Date.now()}`,\n                    type: 'trend',\n                    title: `Revenue ${changePercent > 0 ? 'Growth' : 'Decline'} Detected`,\n                    description: `Revenue has ${changePercent > 0 ? 'increased' : 'decreased'} by ${Math.abs(changePercent).toFixed(1)}% compared to the previous week.`,\n                    confidence: Math.min(Math.abs(changePercent) / 10, 1),\n                    priority: changePercent > 15 || changePercent < -10 ? 'high' : 'medium',\n                    category: 'financial',\n                    recommendations: [\n                        changePercent > 15 ? 'Analyze successful strategies and scale them' : 'Investigate factors causing the decline',\n                        'Monitor closely for continued trend'\n                    ],\n                    created_at: new Date().toISOString()\n                });\n            }\n        }\n        if (params.analysisType === 'anomalies') {\n            // Detect anomalies in data\n            const revenues = data.map((d)=>d.revenue);\n            const mean = revenues.reduce((sum, r)=>sum + r, 0) / revenues.length;\n            const stdDev = Math.sqrt(revenues.reduce((sum, r)=>sum + Math.pow(r - mean, 2), 0) / revenues.length);\n            data.forEach((point, index)=>{\n                const zScore = Math.abs((point.revenue - mean) / stdDev);\n                if (zScore > 2) {\n                    insights.push({\n                        id: `anomaly_${Date.now()}_${index}`,\n                        type: 'anomaly',\n                        title: `Revenue Anomaly on ${point.date}`,\n                        description: `Revenue of ₱${point.revenue.toLocaleString()} is ${zScore.toFixed(1)} standard deviations from normal.`,\n                        confidence: Math.min(zScore / 3, 1),\n                        priority: zScore > 3 ? 'high' : 'medium',\n                        category: 'operational',\n                        recommendations: [\n                            'Investigate the root cause of this anomaly',\n                            'Check for data quality issues or exceptional events'\n                        ],\n                        created_at: new Date().toISOString()\n                    });\n                }\n            });\n        }\n        return insights;\n    }\n    generateRecommendations(section, data, context) {\n        const recommendations = [];\n        // Section-specific recommendations\n        switch(section){\n            case 'transaction-trends':\n                recommendations.push({\n                    id: `rec_trends_${Date.now()}`,\n                    type: 'optimization',\n                    title: 'Optimize Peak Hours',\n                    description: 'Focus marketing efforts during 2-4 PM when conversion rates are highest',\n                    impact: 'high',\n                    effort: 'medium',\n                    category: 'marketing',\n                    metrics: [\n                        'conversion_rate',\n                        'revenue'\n                    ],\n                    estimatedImprovement: '15-20%',\n                    timeline: '2-4 weeks',\n                    created_at: new Date().toISOString()\n                });\n                break;\n            case 'product-mix':\n                recommendations.push({\n                    id: `rec_product_${Date.now()}`,\n                    type: 'inventory',\n                    title: 'Adjust Inventory Mix',\n                    description: 'Increase stock for top-performing categories and reduce underperformers',\n                    impact: 'high',\n                    effort: 'low',\n                    category: 'inventory',\n                    metrics: [\n                        'inventory_turnover',\n                        'profit_margin'\n                    ],\n                    estimatedImprovement: '10-15%',\n                    timeline: '1-2 weeks',\n                    created_at: new Date().toISOString()\n                });\n                break;\n        }\n        return recommendations;\n    }\n    parseQueryIntent(query) {\n        const lowercaseQuery = query.toLowerCase();\n        // Simple intent classification\n        if (lowercaseQuery.includes('show') || lowercaseQuery.includes('display') || lowercaseQuery.includes('get')) {\n            return {\n                type: 'data_request',\n                entities: [],\n                parameters: {}\n            };\n        }\n        if (lowercaseQuery.includes('analyze') || lowercaseQuery.includes('analysis')) {\n            return {\n                type: 'analysis_request',\n                entities: [],\n                parameters: {}\n            };\n        }\n        if (lowercaseQuery.includes('compare') || lowercaseQuery.includes('vs')) {\n            return {\n                type: 'comparison_request',\n                entities: [],\n                parameters: {}\n            };\n        }\n        return {\n            type: 'general',\n            entities: [],\n            parameters: {}\n        };\n    }\n    async handleDataRequest(intent, context) {\n        // Handle data requests\n        return {\n            type: 'data_response',\n            message: 'I can help you access specific data. What metrics would you like to see?',\n            suggestions: [\n                'Show sales trends',\n                'Display top products',\n                'Get regional performance'\n            ]\n        };\n    }\n    async handleAnalysisRequest(intent, context) {\n        // Handle analysis requests\n        return {\n            type: 'analysis_response',\n            message: 'I can perform various analyses on your data. What type of analysis interests you?',\n            suggestions: [\n                'Trend analysis',\n                'Anomaly detection',\n                'Predictive modeling'\n            ]\n        };\n    }\n    async handleComparisonRequest(intent, context) {\n        // Handle comparison requests\n        return {\n            type: 'comparison_response',\n            message: 'I can help you compare different metrics or time periods. What would you like to compare?',\n            suggestions: [\n                'Compare regions',\n                'Month-over-month trends',\n                'Product performance'\n            ]\n        };\n    }\n    async handleGeneralQuery(query, context) {\n        // Handle general queries\n        return {\n            type: 'general_response',\n            message: `I understand you're asking about \"${query}\". Could you be more specific about what data or analysis you need?`,\n            suggestions: [\n                'Ask about specific metrics',\n                'Request trend analysis',\n                'Compare time periods'\n            ]\n        };\n    }\n    generateLinearForecast(data, metric, days) {\n        // Simple linear regression forecast\n        const points = data.map((d, i)=>({\n                x: i,\n                y: d[metric]\n            }));\n        // Calculate linear regression\n        const n = points.length;\n        const sumX = points.reduce((sum, p)=>sum + p.x, 0);\n        const sumY = points.reduce((sum, p)=>sum + p.y, 0);\n        const sumXY = points.reduce((sum, p)=>sum + p.x * p.y, 0);\n        const sumXX = points.reduce((sum, p)=>sum + p.x * p.x, 0);\n        const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n        const intercept = (sumY - slope * sumX) / n;\n        // Generate forecast points\n        const forecast = [];\n        for(let i = 0; i < days; i++){\n            const x = n + i;\n            const y = slope * x + intercept;\n            forecast.push({\n                day: i + 1,\n                predicted_value: Math.max(0, y),\n                confidence: Math.max(0, 1 - i / days * 0.5) // Decreasing confidence over time\n            });\n        }\n        return forecast;\n    }\n    calculateForecastConfidence(data) {\n        // Calculate R-squared for confidence measure\n        if (data.length < 3) return 0.5;\n        const values = data.map((d)=>d.revenue || d.sales || 0);\n        const mean = values.reduce((sum, v)=>sum + v, 0) / values.length;\n        const totalVariation = values.reduce((sum, v)=>sum + Math.pow(v - mean, 2), 0);\n        const trend = this.calculateTrendLine(values);\n        const explainedVariation = values.reduce((sum, v, i)=>sum + Math.pow(trend[i] - mean, 2), 0);\n        const rSquared = explainedVariation / totalVariation;\n        return Math.min(Math.max(rSquared, 0.1), 0.95) // Bounded confidence\n        ;\n    }\n    calculateTrendLine(values) {\n        const n = values.length;\n        const sumX = n * (n - 1) / 2;\n        const sumY = values.reduce((sum, v)=>sum + v, 0);\n        const sumXY = values.reduce((sum, v, i)=>sum + i * v, 0);\n        const sumXX = n * (n - 1) * (2 * n - 1) / 6;\n        const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n        const intercept = (sumY - slope * sumX) / n;\n        return values.map((_, i)=>slope * i + intercept);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AIDAL);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUksS0FBTTtRQUM3QixNQUFNRyxPQUFPUSxPQUFPckQsTUFBTSxDQUFDLENBQUNDLEtBQUtzRCxJQUFNdEQsTUFBTXNELEdBQUc7UUFDaEQsTUFBTVQsUUFBUU8sT0FBT3JELE1BQU0sQ0FBQyxDQUFDQyxLQUFLc0QsR0FBR2hCLElBQU10QyxNQUFNc0MsSUFBSWdCLEdBQUc7UUFDeEQsTUFBTVIsUUFBUSxJQUFNTCxDQUFBQSxJQUFJLEtBQU0sS0FBSUEsSUFBSSxLQUFNO1FBRTVDLE1BQU1NLFFBQVEsQ0FBQ04sSUFBSUksUUFBUUgsT0FBT0UsSUFBRyxJQUFNSCxDQUFBQSxJQUFJSyxRQUFRSixPQUFPQSxJQUFHO1FBQ2pFLE1BQU1NLFlBQVksQ0FBQ0osT0FBT0csUUFBUUwsSUFBRyxJQUFLRDtRQUUxQyxPQUFPVyxPQUFPaEgsR0FBRyxDQUFDLENBQUN3SCxHQUFHdEIsSUFBTVMsUUFBUVQsSUFBSVU7SUFDMUM7QUFDRjtBQUVBLGlFQUFlOUksS0FBS0EsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Njb3V0LWRhc2hib2FyZC1uZXh0anMvLi9saWIvZGFsL2FpLnRzPzY0YTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBSS9MTE0gRGF0YSBBY2Nlc3MgTGF5ZXJcbiAqIEhhbmRsZXMgQUktcG93ZXJlZCBhbmFseXRpY3MsIGluc2lnaHRzLCBhbmQgY2hhdCBmdW5jdGlvbmFsaXR5XG4gKi9cblxuaW1wb3J0IEJhc2VEQUwgZnJvbSAnLi9iYXNlJ1xuaW1wb3J0IHsgQ2hhdE1lc3NhZ2UsIEFJSW5zaWdodCwgUmVjb21tZW5kYXRpb25EYXRhIH0gZnJvbSAnQC9saWIvdHlwZXMvYWknXG5cbmV4cG9ydCBpbnRlcmZhY2UgQUlBbmFseXNpc1BhcmFtcyB7XG4gIGNvbnRleHQ6IHN0cmluZ1xuICBmaWx0ZXJzPzogUmVjb3JkPHN0cmluZywgYW55PlxuICBhbmFseXNpc1R5cGU6ICd0cmVuZHMnIHwgJ2Fub21hbGllcycgfCAncHJlZGljdGlvbnMnIHwgJ3JlY29tbWVuZGF0aW9ucydcbiAgdGltZWZyYW1lPzogc3RyaW5nXG4gIGNvbmZpZGVuY2VUaHJlc2hvbGQ/OiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29udGV4dCB7XG4gIGNvbnZlcnNhdGlvbklkOiBzdHJpbmdcbiAgdXNlckNvbnRleHQ/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIGRhc2hib2FyZFN0YXRlPzogUmVjb3JkPHN0cmluZywgYW55PlxuICBwcmV2aW91c01lc3NhZ2VzPzogQ2hhdE1lc3NhZ2VbXVxufVxuXG5jbGFzcyBBSURBTCBleHRlbmRzIEJhc2VEQUwge1xuXG4gIC8qKlxuICAgKiBTdG9yZSBhbmQgcmV0cmlldmUgY2hhdCBtZXNzYWdlc1xuICAgKi9cbiAgYXN5bmMgc3RvcmVDaGF0TWVzc2FnZShtZXNzYWdlOiBDaGF0TWVzc2FnZSk6IFByb21pc2U8eyBkYXRhOiBDaGF0TWVzc2FnZSB8IG51bGw7IGVycm9yOiBzdHJpbmcgfCBudWxsIH0+IHtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlUXVlcnk8Q2hhdE1lc3NhZ2U+KFxuICAgICAgYXN5bmMgKGNsaWVudCkgPT4ge1xuICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBjbGllbnRcbiAgICAgICAgICAuZnJvbSgncGxhdGludW0uY2hhdF9tZXNzYWdlcycpXG4gICAgICAgICAgLmluc2VydChbbWVzc2FnZV0pXG4gICAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgICAgLnNpbmdsZSgpXG5cbiAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3IgfVxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIGdldENoYXRIaXN0b3J5KGNvbnZlcnNhdGlvbklkOiBzdHJpbmcsIGxpbWl0OiBudW1iZXIgPSA1MCk6IFByb21pc2U8eyBkYXRhOiBDaGF0TWVzc2FnZVtdIHwgbnVsbDsgZXJyb3I6IHN0cmluZyB8IG51bGwgfT4ge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYGNoYXRfaGlzdG9yeV8ke2NvbnZlcnNhdGlvbklkfWBcbiAgICBcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlUXVlcnk8Q2hhdE1lc3NhZ2VbXT4oXG4gICAgICBhc3luYyAoY2xpZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IGNsaWVudFxuICAgICAgICAgIC5mcm9tKCdwbGF0aW51bS5jaGF0X21lc3NhZ2VzJylcbiAgICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgICAuZXEoJ2NvbnZlcnNhdGlvbl9pZCcsIGNvbnZlcnNhdGlvbklkKVxuICAgICAgICAgIC5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiB0cnVlIH0pXG4gICAgICAgICAgLmxpbWl0KGxpbWl0KVxuXG4gICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yIH1cbiAgICAgIH0sXG4gICAgICBjYWNoZUtleSxcbiAgICAgIDYwMDAwIC8vIDEgbWludXRlIGNhY2hlIGZvciBjaGF0XG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIEFJIGluc2lnaHRzIGZyb20gdHJhbnNhY3Rpb24gZGF0YVxuICAgKi9cbiAgYXN5bmMgZ2VuZXJhdGVJbnNpZ2h0cyhwYXJhbXM6IEFJQW5hbHlzaXNQYXJhbXMpOiBQcm9taXNlPHsgZGF0YTogQUlJbnNpZ2h0W10gfCBudWxsOyBlcnJvcjogc3RyaW5nIHwgbnVsbCB9PiB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgaW5zaWdodHNfJHtKU09OLnN0cmluZ2lmeShwYXJhbXMpfWBcbiAgICBcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlUXVlcnk8QUlJbnNpZ2h0W10+KFxuICAgICAgYXN5bmMgKGNsaWVudCkgPT4ge1xuICAgICAgICAvLyBGaXJzdCwgZ2V0IHRoZSBkYXRhIGNvbnRleHQgZm9yIEFJIGFuYWx5c2lzXG4gICAgICAgIGNvbnN0IGNvbnRleHRRdWVyeSA9IHRoaXMuYnVpbGRDb250ZXh0UXVlcnkocGFyYW1zKVxuICAgICAgICBjb25zdCB7IGRhdGE6IGNvbnRleHREYXRhLCBlcnJvcjogY29udGV4dEVycm9yIH0gPSBhd2FpdCBjbGllbnQucnBjKCdnZXRfYWlfY29udGV4dCcsIHtcbiAgICAgICAgICBhbmFseXNpc190eXBlOiBwYXJhbXMuYW5hbHlzaXNUeXBlLFxuICAgICAgICAgIGZpbHRlcnM6IHBhcmFtcy5maWx0ZXJzIHx8IHt9LFxuICAgICAgICAgIHRpbWVmcmFtZTogcGFyYW1zLnRpbWVmcmFtZSB8fCAnMzBkJ1xuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChjb250ZXh0RXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvcjogY29udGV4dEVycm9yIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvciBub3csIGdlbmVyYXRlIHJ1bGUtYmFzZWQgaW5zaWdodHNcbiAgICAgICAgLy8gSW4gcHJvZHVjdGlvbiwgdGhpcyB3b3VsZCBjYWxsIE9wZW5BSS9BbnRocm9waWMgQVBJc1xuICAgICAgICBjb25zdCBpbnNpZ2h0cyA9IHRoaXMuZ2VuZXJhdGVSdWxlQmFzZWRJbnNpZ2h0cyhjb250ZXh0RGF0YSwgcGFyYW1zKVxuICAgICAgICBcbiAgICAgICAgLy8gU3RvcmUgaW5zaWdodHMgZm9yIHRyYWNraW5nXG4gICAgICAgIGNvbnN0IHsgZXJyb3I6IHN0b3JlRXJyb3IgfSA9IGF3YWl0IGNsaWVudFxuICAgICAgICAgIC5mcm9tKCdwbGF0aW51bS5haV9pbnNpZ2h0cycpXG4gICAgICAgICAgLmluc2VydChpbnNpZ2h0cy5tYXAoaW5zaWdodCA9PiAoe1xuICAgICAgICAgICAgLi4uaW5zaWdodCxcbiAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIGFuYWx5c2lzX3BhcmFtczogcGFyYW1zXG4gICAgICAgICAgfSkpKVxuXG4gICAgICAgIGlmIChzdG9yZUVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gc3RvcmUgaW5zaWdodHM6Jywgc3RvcmVFcnJvcilcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IGRhdGE6IGluc2lnaHRzLCBlcnJvcjogbnVsbCB9XG4gICAgICB9LFxuICAgICAgY2FjaGVLZXksXG4gICAgICA2MDAwMDAgLy8gMTAgbWludXRlcyBjYWNoZVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQUktcG93ZXJlZCByZWNvbW1lbmRhdGlvbnNcbiAgICovXG4gIGFzeW5jIGdldFJlY29tbWVuZGF0aW9ucyhcbiAgICBzZWN0aW9uOiBzdHJpbmcsIFxuICAgIHVzZXJDb250ZXh0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge31cbiAgKTogUHJvbWlzZTx7IGRhdGE6IFJlY29tbWVuZGF0aW9uRGF0YVtdIHwgbnVsbDsgZXJyb3I6IHN0cmluZyB8IG51bGwgfT4ge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYHJlY29tbWVuZGF0aW9uc18ke3NlY3Rpb259XyR7SlNPTi5zdHJpbmdpZnkodXNlckNvbnRleHQpfWBcbiAgICBcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlUXVlcnk8UmVjb21tZW5kYXRpb25EYXRhW10+KFxuICAgICAgYXN5bmMgKGNsaWVudCkgPT4ge1xuICAgICAgICAvLyBHZXQgcmVjZW50IHBlcmZvcm1hbmNlIGRhdGEgZm9yIHJlY29tbWVuZGF0aW9uc1xuICAgICAgICBjb25zdCB7IGRhdGE6IHBlcmZvcm1hbmNlRGF0YSwgZXJyb3I6IHBlcmZFcnJvciB9ID0gYXdhaXQgY2xpZW50LnJwYygnZ2V0X3JlY29tbWVuZGF0aW9uX2NvbnRleHQnLCB7XG4gICAgICAgICAgc2VjdGlvbixcbiAgICAgICAgICB1c2VyX2NvbnRleHQ6IHVzZXJDb250ZXh0XG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKHBlcmZFcnJvcikge1xuICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yOiBwZXJmRXJyb3IgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgY29udGV4dHVhbCByZWNvbW1lbmRhdGlvbnNcbiAgICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gdGhpcy5nZW5lcmF0ZVJlY29tbWVuZGF0aW9ucyhzZWN0aW9uLCBwZXJmb3JtYW5jZURhdGEsIHVzZXJDb250ZXh0KVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHsgZGF0YTogcmVjb21tZW5kYXRpb25zLCBlcnJvcjogbnVsbCB9XG4gICAgICB9LFxuICAgICAgY2FjaGVLZXksXG4gICAgICAzMDAwMDAgLy8gNSBtaW51dGVzIGNhY2hlXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gc2VtYW50aWMgc2VhcmNoIGFjcm9zcyB0cmFuc2FjdGlvbiBkYXRhIGFuZCBpbnNpZ2h0c1xuICAgKi9cbiAgYXN5bmMgc2VtYW50aWNTZWFyY2gocXVlcnk6IHN0cmluZywgZmlsdGVyczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9KTogUHJvbWlzZTx7IGRhdGE6IGFueVtdIHwgbnVsbDsgZXJyb3I6IHN0cmluZyB8IG51bGwgfT4ge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYHNlbWFudGljXyR7cXVlcnl9XyR7SlNPTi5zdHJpbmdpZnkoZmlsdGVycyl9YFxuICAgIFxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGVRdWVyeTxhbnlbXT4oXG4gICAgICBhc3luYyAoY2xpZW50KSA9PiB7XG4gICAgICAgIC8vIFVzZSBQb3N0Z3JlU1FMIGZ1bGwtdGV4dCBzZWFyY2ggZm9yIG5vd1xuICAgICAgICAvLyBJbiBwcm9kdWN0aW9uLCB0aGlzIHdvdWxkIHVzZSB2ZWN0b3IgZW1iZWRkaW5nc1xuICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBjbGllbnQucnBjKCdzZW1hbnRpY19zZWFyY2gnLCB7XG4gICAgICAgICAgc2VhcmNoX3F1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICBmaWx0ZXJzOiBmaWx0ZXJzLFxuICAgICAgICAgIGxpbWl0OiAyMFxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yIH1cbiAgICAgIH0sXG4gICAgICBjYWNoZUtleSxcbiAgICAgIDMwMDAwMCAvLyA1IG1pbnV0ZXMgY2FjaGVcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogRGV0ZWN0IGFub21hbGllcyBpbiB0cmFuc2FjdGlvbiBwYXR0ZXJuc1xuICAgKi9cbiAgYXN5bmMgZGV0ZWN0QW5vbWFsaWVzKFxuICAgIG1ldHJpYzogc3RyaW5nID0gJ3NhbGVzJyxcbiAgICB0aW1lZnJhbWU6IHN0cmluZyA9ICc3ZCcsXG4gICAgc2Vuc2l0aXZpdHk6IG51bWJlciA9IDIuMFxuICApOiBQcm9taXNlPHsgZGF0YTogYW55W10gfCBudWxsOyBlcnJvcjogc3RyaW5nIHwgbnVsbCB9PiB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgYW5vbWFsaWVzXyR7bWV0cmljfV8ke3RpbWVmcmFtZX1fJHtzZW5zaXRpdml0eX1gXG4gICAgXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZVF1ZXJ5PGFueVtdPihcbiAgICAgIGFzeW5jIChjbGllbnQpID0+IHtcbiAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgY2xpZW50LnJwYygnZGV0ZWN0X2Fub21hbGllcycsIHtcbiAgICAgICAgICBtZXRyaWNfbmFtZTogbWV0cmljLFxuICAgICAgICAgIHRpbWVfd2luZG93OiB0aW1lZnJhbWUsXG4gICAgICAgICAgc2Vuc2l0aXZpdHlfdGhyZXNob2xkOiBzZW5zaXRpdml0eVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yIH1cbiAgICAgIH0sXG4gICAgICBjYWNoZUtleSxcbiAgICAgIDYwMDAwMCAvLyAxMCBtaW51dGVzIGNhY2hlXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHByZWRpY3Rpb25zIGZvciBidXNpbmVzcyBtZXRyaWNzXG4gICAqL1xuICBhc3luYyBnZW5lcmF0ZVByZWRpY3Rpb25zKFxuICAgIG1ldHJpY3M6IHN0cmluZ1tdLFxuICAgIGZvcmVjYXN0RGF5czogbnVtYmVyID0gMzBcbiAgKTogUHJvbWlzZTx7IGRhdGE6IGFueVtdIHwgbnVsbDsgZXJyb3I6IHN0cmluZyB8IG51bGwgfT4ge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYHByZWRpY3Rpb25zXyR7bWV0cmljcy5qb2luKCcsJyl9XyR7Zm9yZWNhc3REYXlzfWBcbiAgICBcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlUXVlcnk8YW55W10+KFxuICAgICAgYXN5bmMgKGNsaWVudCkgPT4ge1xuICAgICAgICAvLyBTaW1wbGUgbGluZWFyIHJlZ3Jlc3Npb24gZm9yIG5vd1xuICAgICAgICAvLyBJbiBwcm9kdWN0aW9uLCB1c2UgbW9yZSBzb3BoaXN0aWNhdGVkIE1MIG1vZGVsc1xuICAgICAgICBjb25zdCBwcmVkaWN0aW9ucyA9IFtdXG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IG1ldHJpYyBvZiBtZXRyaWNzKSB7XG4gICAgICAgICAgY29uc3QgeyBkYXRhOiBoaXN0b3JpY2FsRGF0YSwgZXJyb3IgfSA9IGF3YWl0IGNsaWVudFxuICAgICAgICAgICAgLmZyb20oJ3ZfdHJlbmRzX2RhaWx5JylcbiAgICAgICAgICAgIC5zZWxlY3QoYGRheSwgJHttZXRyaWN9YClcbiAgICAgICAgICAgIC5vcmRlcignZGF5JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgICAgICAgICAubGltaXQoOTApIC8vIFVzZSA5MCBkYXlzIGZvciB0cmVuZCBhbmFseXNpc1xuXG4gICAgICAgICAgaWYgKGVycm9yKSBjb250aW51ZVxuXG4gICAgICAgICAgY29uc3QgZm9yZWNhc3QgPSB0aGlzLmdlbmVyYXRlTGluZWFyRm9yZWNhc3QoaGlzdG9yaWNhbERhdGEsIG1ldHJpYywgZm9yZWNhc3REYXlzKVxuICAgICAgICAgIHByZWRpY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgbWV0cmljLFxuICAgICAgICAgICAgZm9yZWNhc3QsXG4gICAgICAgICAgICBjb25maWRlbmNlOiB0aGlzLmNhbGN1bGF0ZUZvcmVjYXN0Q29uZmlkZW5jZShoaXN0b3JpY2FsRGF0YSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgZGF0YTogcHJlZGljdGlvbnMsIGVycm9yOiBudWxsIH1cbiAgICAgIH0sXG4gICAgICBjYWNoZUtleSxcbiAgICAgIDE4MDAwMDAgLy8gMzAgbWludXRlcyBjYWNoZVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIG5hdHVyYWwgbGFuZ3VhZ2UgcXVlcnkgZm9yIGRhc2hib2FyZCBpbnNpZ2h0c1xuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc05hdHVyYWxMYW5ndWFnZVF1ZXJ5KFxuICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgY29udGV4dDogQ2hhdENvbnRleHRcbiAgKTogUHJvbWlzZTx7IGRhdGE6IGFueSB8IG51bGw7IGVycm9yOiBzdHJpbmcgfCBudWxsIH0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gUGFyc2UgaW50ZW50IGZyb20gcXVlcnlcbiAgICAgIGNvbnN0IGludGVudCA9IHRoaXMucGFyc2VRdWVyeUludGVudChxdWVyeSlcbiAgICAgIFxuICAgICAgLy8gR2VuZXJhdGUgYXBwcm9wcmlhdGUgcmVzcG9uc2UgYmFzZWQgb24gaW50ZW50XG4gICAgICBsZXQgcmVzcG9uc2VcbiAgICAgIHN3aXRjaCAoaW50ZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnZGF0YV9yZXF1ZXN0JzpcbiAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuaGFuZGxlRGF0YVJlcXVlc3QoaW50ZW50LCBjb250ZXh0KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2FuYWx5c2lzX3JlcXVlc3QnOlxuICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5oYW5kbGVBbmFseXNpc1JlcXVlc3QoaW50ZW50LCBjb250ZXh0KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2NvbXBhcmlzb25fcmVxdWVzdCc6XG4gICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmhhbmRsZUNvbXBhcmlzb25SZXF1ZXN0KGludGVudCwgY29udGV4dClcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5oYW5kbGVHZW5lcmFsUXVlcnkocXVlcnksIGNvbnRleHQpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IGRhdGE6IHJlc3BvbnNlLCBlcnJvcjogbnVsbCB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGUgaGVscGVyIG1ldGhvZHNcbiAgcHJpdmF0ZSBidWlsZENvbnRleHRRdWVyeShwYXJhbXM6IEFJQW5hbHlzaXNQYXJhbXMpOiBzdHJpbmcge1xuICAgIC8vIEJ1aWxkIFNRTCBxdWVyeSBiYXNlZCBvbiBhbmFseXNpcyBwYXJhbWV0ZXJzXG4gICAgY29uc3QgYmFzZVF1ZXJ5ID0gYFxuICAgICAgU0VMRUNUIFxuICAgICAgICBEQVRFX1RSVU5DKCdkYXknLCB0aW1lc3RhbXApIGFzIGRhdGUsXG4gICAgICAgIENPVU5UKCopIGFzIHRyYW5zYWN0aW9ucyxcbiAgICAgICAgU1VNKHBlc29fdmFsdWUpIGFzIHJldmVudWUsXG4gICAgICAgIEFWRyhwZXNvX3ZhbHVlKSBhcyBhdmdfb3JkZXJfdmFsdWUsXG4gICAgICAgIENPVU5UKERJU1RJTkNUIHN0b3JlX2lkKSBhcyB1bmlxdWVfc3RvcmVzXG4gICAgICBGUk9NIHRyYW5zYWN0aW9uc1xuICAgICAgV0hFUkUgdGltZXN0YW1wID49IE5PVygpIC0gSU5URVJWQUwgJyR7cGFyYW1zLnRpbWVmcmFtZSB8fCAnMzBkJ30nXG4gICAgYFxuICAgIFxuICAgIGlmIChwYXJhbXMuZmlsdGVycykge1xuICAgICAgLy8gQWRkIGZpbHRlciBjb25kaXRpb25zXG4gICAgICBPYmplY3QuZW50cmllcyhwYXJhbXMuZmlsdGVycykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGJhc2VRdWVyeSArIGAgQU5EICR7a2V5fSA9IEFOWSgkJHt2YWx1ZX0pYFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJhc2VRdWVyeSArIGAgQU5EICR7a2V5fSA9ICcke3ZhbHVlfSdgXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBiYXNlUXVlcnkgKyAnIEdST1VQIEJZIERBVEVfVFJVTkMoXFwnZGF5XFwnLCB0aW1lc3RhbXApIE9SREVSIEJZIGRhdGUnXG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlUnVsZUJhc2VkSW5zaWdodHMoZGF0YTogYW55W10sIHBhcmFtczogQUlBbmFseXNpc1BhcmFtcyk6IEFJSW5zaWdodFtdIHtcbiAgICBjb25zdCBpbnNpZ2h0czogQUlJbnNpZ2h0W10gPSBbXVxuICAgIFxuICAgIGlmIChwYXJhbXMuYW5hbHlzaXNUeXBlID09PSAndHJlbmRzJykge1xuICAgICAgLy8gRGV0ZWN0IHRyZW5kIHBhdHRlcm5zXG4gICAgICBpZiAoZGF0YS5sZW5ndGggPj0gNykge1xuICAgICAgICBjb25zdCByZWNlbnRXZWVrID0gZGF0YS5zbGljZSgtNylcbiAgICAgICAgY29uc3QgcHJldmlvdXNXZWVrID0gZGF0YS5zbGljZSgtMTQsIC03KVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVjZW50QXZnID0gcmVjZW50V2Vlay5yZWR1Y2UoKHN1bSwgZCkgPT4gc3VtICsgZC5yZXZlbnVlLCAwKSAvIHJlY2VudFdlZWsubGVuZ3RoXG4gICAgICAgIGNvbnN0IHByZXZpb3VzQXZnID0gcHJldmlvdXNXZWVrLnJlZHVjZSgoc3VtLCBkKSA9PiBzdW0gKyBkLnJldmVudWUsIDApIC8gcHJldmlvdXNXZWVrLmxlbmd0aFxuICAgICAgICBcbiAgICAgICAgY29uc3QgY2hhbmdlUGVyY2VudCA9ICgocmVjZW50QXZnIC0gcHJldmlvdXNBdmcpIC8gcHJldmlvdXNBdmcpICogMTAwXG4gICAgICAgIFxuICAgICAgICBpbnNpZ2h0cy5wdXNoKHtcbiAgICAgICAgICBpZDogYHRyZW5kXyR7RGF0ZS5ub3coKX1gLFxuICAgICAgICAgIHR5cGU6ICd0cmVuZCcsXG4gICAgICAgICAgdGl0bGU6IGBSZXZlbnVlICR7Y2hhbmdlUGVyY2VudCA+IDAgPyAnR3Jvd3RoJyA6ICdEZWNsaW5lJ30gRGV0ZWN0ZWRgLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgUmV2ZW51ZSBoYXMgJHtjaGFuZ2VQZXJjZW50ID4gMCA/ICdpbmNyZWFzZWQnIDogJ2RlY3JlYXNlZCd9IGJ5ICR7TWF0aC5hYnMoY2hhbmdlUGVyY2VudCkudG9GaXhlZCgxKX0lIGNvbXBhcmVkIHRvIHRoZSBwcmV2aW91cyB3ZWVrLmAsXG4gICAgICAgICAgY29uZmlkZW5jZTogTWF0aC5taW4oTWF0aC5hYnMoY2hhbmdlUGVyY2VudCkgLyAxMCwgMSksXG4gICAgICAgICAgcHJpb3JpdHk6IGNoYW5nZVBlcmNlbnQgPiAxNSB8fCBjaGFuZ2VQZXJjZW50IDwgLTEwID8gJ2hpZ2gnIDogJ21lZGl1bScsXG4gICAgICAgICAgY2F0ZWdvcnk6ICdmaW5hbmNpYWwnLFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICAgICAgY2hhbmdlUGVyY2VudCA+IDE1ID8gJ0FuYWx5emUgc3VjY2Vzc2Z1bCBzdHJhdGVnaWVzIGFuZCBzY2FsZSB0aGVtJyA6ICdJbnZlc3RpZ2F0ZSBmYWN0b3JzIGNhdXNpbmcgdGhlIGRlY2xpbmUnLFxuICAgICAgICAgICAgJ01vbml0b3IgY2xvc2VseSBmb3IgY29udGludWVkIHRyZW5kJ1xuICAgICAgICAgIF0sXG4gICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChwYXJhbXMuYW5hbHlzaXNUeXBlID09PSAnYW5vbWFsaWVzJykge1xuICAgICAgLy8gRGV0ZWN0IGFub21hbGllcyBpbiBkYXRhXG4gICAgICBjb25zdCByZXZlbnVlcyA9IGRhdGEubWFwKGQgPT4gZC5yZXZlbnVlKVxuICAgICAgY29uc3QgbWVhbiA9IHJldmVudWVzLnJlZHVjZSgoc3VtLCByKSA9PiBzdW0gKyByLCAwKSAvIHJldmVudWVzLmxlbmd0aFxuICAgICAgY29uc3Qgc3RkRGV2ID0gTWF0aC5zcXJ0KHJldmVudWVzLnJlZHVjZSgoc3VtLCByKSA9PiBzdW0gKyBNYXRoLnBvdyhyIC0gbWVhbiwgMiksIDApIC8gcmV2ZW51ZXMubGVuZ3RoKVxuICAgICAgXG4gICAgICBkYXRhLmZvckVhY2goKHBvaW50LCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB6U2NvcmUgPSBNYXRoLmFicygocG9pbnQucmV2ZW51ZSAtIG1lYW4pIC8gc3RkRGV2KVxuICAgICAgICBpZiAoelNjb3JlID4gMikge1xuICAgICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgICAgaWQ6IGBhbm9tYWx5XyR7RGF0ZS5ub3coKX1fJHtpbmRleH1gLFxuICAgICAgICAgICAgdHlwZTogJ2Fub21hbHknLFxuICAgICAgICAgICAgdGl0bGU6IGBSZXZlbnVlIEFub21hbHkgb24gJHtwb2ludC5kYXRlfWAsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYFJldmVudWUgb2Yg4oKxJHtwb2ludC5yZXZlbnVlLnRvTG9jYWxlU3RyaW5nKCl9IGlzICR7elNjb3JlLnRvRml4ZWQoMSl9IHN0YW5kYXJkIGRldmlhdGlvbnMgZnJvbSBub3JtYWwuYCxcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IE1hdGgubWluKHpTY29yZSAvIDMsIDEpLFxuICAgICAgICAgICAgcHJpb3JpdHk6IHpTY29yZSA+IDMgPyAnaGlnaCcgOiAnbWVkaXVtJyxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnb3BlcmF0aW9uYWwnLFxuICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXG4gICAgICAgICAgICAgICdJbnZlc3RpZ2F0ZSB0aGUgcm9vdCBjYXVzZSBvZiB0aGlzIGFub21hbHknLFxuICAgICAgICAgICAgICAnQ2hlY2sgZm9yIGRhdGEgcXVhbGl0eSBpc3N1ZXMgb3IgZXhjZXB0aW9uYWwgZXZlbnRzJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBpbnNpZ2h0c1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVJlY29tbWVuZGF0aW9ucyhzZWN0aW9uOiBzdHJpbmcsIGRhdGE6IGFueVtdLCBjb250ZXh0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogUmVjb21tZW5kYXRpb25EYXRhW10ge1xuICAgIGNvbnN0IHJlY29tbWVuZGF0aW9uczogUmVjb21tZW5kYXRpb25EYXRhW10gPSBbXVxuICAgIFxuICAgIC8vIFNlY3Rpb24tc3BlY2lmaWMgcmVjb21tZW5kYXRpb25zXG4gICAgc3dpdGNoIChzZWN0aW9uKSB7XG4gICAgICBjYXNlICd0cmFuc2FjdGlvbi10cmVuZHMnOlxuICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgICAgaWQ6IGByZWNfdHJlbmRzXyR7RGF0ZS5ub3coKX1gLFxuICAgICAgICAgIHR5cGU6ICdvcHRpbWl6YXRpb24nLFxuICAgICAgICAgIHRpdGxlOiAnT3B0aW1pemUgUGVhayBIb3VycycsXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdGb2N1cyBtYXJrZXRpbmcgZWZmb3J0cyBkdXJpbmcgMi00IFBNIHdoZW4gY29udmVyc2lvbiByYXRlcyBhcmUgaGlnaGVzdCcsXG4gICAgICAgICAgaW1wYWN0OiAnaGlnaCcsXG4gICAgICAgICAgZWZmb3J0OiAnbWVkaXVtJyxcbiAgICAgICAgICBjYXRlZ29yeTogJ21hcmtldGluZycsXG4gICAgICAgICAgbWV0cmljczogWydjb252ZXJzaW9uX3JhdGUnLCAncmV2ZW51ZSddLFxuICAgICAgICAgIGVzdGltYXRlZEltcHJvdmVtZW50OiAnMTUtMjAlJyxcbiAgICAgICAgICB0aW1lbGluZTogJzItNCB3ZWVrcycsXG4gICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICAgIFxuICAgICAgY2FzZSAncHJvZHVjdC1taXgnOlxuICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgICAgaWQ6IGByZWNfcHJvZHVjdF8ke0RhdGUubm93KCl9YCxcbiAgICAgICAgICB0eXBlOiAnaW52ZW50b3J5JyxcbiAgICAgICAgICB0aXRsZTogJ0FkanVzdCBJbnZlbnRvcnkgTWl4JyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0luY3JlYXNlIHN0b2NrIGZvciB0b3AtcGVyZm9ybWluZyBjYXRlZ29yaWVzIGFuZCByZWR1Y2UgdW5kZXJwZXJmb3JtZXJzJyxcbiAgICAgICAgICBpbXBhY3Q6ICdoaWdoJyxcbiAgICAgICAgICBlZmZvcnQ6ICdsb3cnLFxuICAgICAgICAgIGNhdGVnb3J5OiAnaW52ZW50b3J5JyxcbiAgICAgICAgICBtZXRyaWNzOiBbJ2ludmVudG9yeV90dXJub3ZlcicsICdwcm9maXRfbWFyZ2luJ10sXG4gICAgICAgICAgZXN0aW1hdGVkSW1wcm92ZW1lbnQ6ICcxMC0xNSUnLFxuICAgICAgICAgIHRpbWVsaW5lOiAnMS0yIHdlZWtzJyxcbiAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlY29tbWVuZGF0aW9uc1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZVF1ZXJ5SW50ZW50KHF1ZXJ5OiBzdHJpbmcpOiB7IHR5cGU6IHN0cmluZzsgZW50aXRpZXM6IHN0cmluZ1tdOyBwYXJhbWV0ZXJzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IH0ge1xuICAgIGNvbnN0IGxvd2VyY2FzZVF1ZXJ5ID0gcXVlcnkudG9Mb3dlckNhc2UoKVxuICAgIFxuICAgIC8vIFNpbXBsZSBpbnRlbnQgY2xhc3NpZmljYXRpb25cbiAgICBpZiAobG93ZXJjYXNlUXVlcnkuaW5jbHVkZXMoJ3Nob3cnKSB8fCBsb3dlcmNhc2VRdWVyeS5pbmNsdWRlcygnZGlzcGxheScpIHx8IGxvd2VyY2FzZVF1ZXJ5LmluY2x1ZGVzKCdnZXQnKSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogJ2RhdGFfcmVxdWVzdCcsIGVudGl0aWVzOiBbXSwgcGFyYW1ldGVyczoge30gfVxuICAgIH1cbiAgICBcbiAgICBpZiAobG93ZXJjYXNlUXVlcnkuaW5jbHVkZXMoJ2FuYWx5emUnKSB8fCBsb3dlcmNhc2VRdWVyeS5pbmNsdWRlcygnYW5hbHlzaXMnKSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogJ2FuYWx5c2lzX3JlcXVlc3QnLCBlbnRpdGllczogW10sIHBhcmFtZXRlcnM6IHt9IH1cbiAgICB9XG4gICAgXG4gICAgaWYgKGxvd2VyY2FzZVF1ZXJ5LmluY2x1ZGVzKCdjb21wYXJlJykgfHwgbG93ZXJjYXNlUXVlcnkuaW5jbHVkZXMoJ3ZzJykpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6ICdjb21wYXJpc29uX3JlcXVlc3QnLCBlbnRpdGllczogW10sIHBhcmFtZXRlcnM6IHt9IH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHsgdHlwZTogJ2dlbmVyYWwnLCBlbnRpdGllczogW10sIHBhcmFtZXRlcnM6IHt9IH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlRGF0YVJlcXVlc3QoaW50ZW50OiBhbnksIGNvbnRleHQ6IENoYXRDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyBIYW5kbGUgZGF0YSByZXF1ZXN0c1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZGF0YV9yZXNwb25zZScsXG4gICAgICBtZXNzYWdlOiAnSSBjYW4gaGVscCB5b3UgYWNjZXNzIHNwZWNpZmljIGRhdGEuIFdoYXQgbWV0cmljcyB3b3VsZCB5b3UgbGlrZSB0byBzZWU/JyxcbiAgICAgIHN1Z2dlc3Rpb25zOiBbJ1Nob3cgc2FsZXMgdHJlbmRzJywgJ0Rpc3BsYXkgdG9wIHByb2R1Y3RzJywgJ0dldCByZWdpb25hbCBwZXJmb3JtYW5jZSddXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVBbmFseXNpc1JlcXVlc3QoaW50ZW50OiBhbnksIGNvbnRleHQ6IENoYXRDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyBIYW5kbGUgYW5hbHlzaXMgcmVxdWVzdHNcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2FuYWx5c2lzX3Jlc3BvbnNlJyxcbiAgICAgIG1lc3NhZ2U6ICdJIGNhbiBwZXJmb3JtIHZhcmlvdXMgYW5hbHlzZXMgb24geW91ciBkYXRhLiBXaGF0IHR5cGUgb2YgYW5hbHlzaXMgaW50ZXJlc3RzIHlvdT8nLFxuICAgICAgc3VnZ2VzdGlvbnM6IFsnVHJlbmQgYW5hbHlzaXMnLCAnQW5vbWFseSBkZXRlY3Rpb24nLCAnUHJlZGljdGl2ZSBtb2RlbGluZyddXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVDb21wYXJpc29uUmVxdWVzdChpbnRlbnQ6IGFueSwgY29udGV4dDogQ2hhdENvbnRleHQpOiBQcm9taXNlPGFueT4ge1xuICAgIC8vIEhhbmRsZSBjb21wYXJpc29uIHJlcXVlc3RzXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdjb21wYXJpc29uX3Jlc3BvbnNlJyxcbiAgICAgIG1lc3NhZ2U6ICdJIGNhbiBoZWxwIHlvdSBjb21wYXJlIGRpZmZlcmVudCBtZXRyaWNzIG9yIHRpbWUgcGVyaW9kcy4gV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBjb21wYXJlPycsXG4gICAgICBzdWdnZXN0aW9uczogWydDb21wYXJlIHJlZ2lvbnMnLCAnTW9udGgtb3Zlci1tb250aCB0cmVuZHMnLCAnUHJvZHVjdCBwZXJmb3JtYW5jZSddXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVHZW5lcmFsUXVlcnkocXVlcnk6IHN0cmluZywgY29udGV4dDogQ2hhdENvbnRleHQpOiBQcm9taXNlPGFueT4ge1xuICAgIC8vIEhhbmRsZSBnZW5lcmFsIHF1ZXJpZXNcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2dlbmVyYWxfcmVzcG9uc2UnLFxuICAgICAgbWVzc2FnZTogYEkgdW5kZXJzdGFuZCB5b3UncmUgYXNraW5nIGFib3V0IFwiJHtxdWVyeX1cIi4gQ291bGQgeW91IGJlIG1vcmUgc3BlY2lmaWMgYWJvdXQgd2hhdCBkYXRhIG9yIGFuYWx5c2lzIHlvdSBuZWVkP2AsXG4gICAgICBzdWdnZXN0aW9uczogWydBc2sgYWJvdXQgc3BlY2lmaWMgbWV0cmljcycsICdSZXF1ZXN0IHRyZW5kIGFuYWx5c2lzJywgJ0NvbXBhcmUgdGltZSBwZXJpb2RzJ11cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlTGluZWFyRm9yZWNhc3QoZGF0YTogYW55W10sIG1ldHJpYzogc3RyaW5nLCBkYXlzOiBudW1iZXIpOiBhbnlbXSB7XG4gICAgLy8gU2ltcGxlIGxpbmVhciByZWdyZXNzaW9uIGZvcmVjYXN0XG4gICAgY29uc3QgcG9pbnRzID0gZGF0YS5tYXAoKGQsIGkpID0+ICh7IHg6IGksIHk6IGRbbWV0cmljXSB9KSlcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgbGluZWFyIHJlZ3Jlc3Npb25cbiAgICBjb25zdCBuID0gcG9pbnRzLmxlbmd0aFxuICAgIGNvbnN0IHN1bVggPSBwb2ludHMucmVkdWNlKChzdW0sIHApID0+IHN1bSArIHAueCwgMClcbiAgICBjb25zdCBzdW1ZID0gcG9pbnRzLnJlZHVjZSgoc3VtLCBwKSA9PiBzdW0gKyBwLnksIDApXG4gICAgY29uc3Qgc3VtWFkgPSBwb2ludHMucmVkdWNlKChzdW0sIHApID0+IHN1bSArIHAueCAqIHAueSwgMClcbiAgICBjb25zdCBzdW1YWCA9IHBvaW50cy5yZWR1Y2UoKHN1bSwgcCkgPT4gc3VtICsgcC54ICogcC54LCAwKVxuICAgIFxuICAgIGNvbnN0IHNsb3BlID0gKG4gKiBzdW1YWSAtIHN1bVggKiBzdW1ZKSAvIChuICogc3VtWFggLSBzdW1YICogc3VtWClcbiAgICBjb25zdCBpbnRlcmNlcHQgPSAoc3VtWSAtIHNsb3BlICogc3VtWCkgLyBuXG4gICAgXG4gICAgLy8gR2VuZXJhdGUgZm9yZWNhc3QgcG9pbnRzXG4gICAgY29uc3QgZm9yZWNhc3QgPSBbXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF5czsgaSsrKSB7XG4gICAgICBjb25zdCB4ID0gbiArIGlcbiAgICAgIGNvbnN0IHkgPSBzbG9wZSAqIHggKyBpbnRlcmNlcHRcbiAgICAgIGZvcmVjYXN0LnB1c2goe1xuICAgICAgICBkYXk6IGkgKyAxLFxuICAgICAgICBwcmVkaWN0ZWRfdmFsdWU6IE1hdGgubWF4KDAsIHkpLCAvLyBFbnN1cmUgbm9uLW5lZ2F0aXZlXG4gICAgICAgIGNvbmZpZGVuY2U6IE1hdGgubWF4KDAsIDEgLSAoaSAvIGRheXMpICogMC41KSAvLyBEZWNyZWFzaW5nIGNvbmZpZGVuY2Ugb3ZlciB0aW1lXG4gICAgICB9KVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZm9yZWNhc3RcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlRm9yZWNhc3RDb25maWRlbmNlKGRhdGE6IGFueVtdKTogbnVtYmVyIHtcbiAgICAvLyBDYWxjdWxhdGUgUi1zcXVhcmVkIGZvciBjb25maWRlbmNlIG1lYXN1cmVcbiAgICBpZiAoZGF0YS5sZW5ndGggPCAzKSByZXR1cm4gMC41XG4gICAgXG4gICAgY29uc3QgdmFsdWVzID0gZGF0YS5tYXAoZCA9PiBkLnJldmVudWUgfHwgZC5zYWxlcyB8fCAwKVxuICAgIGNvbnN0IG1lYW4gPSB2YWx1ZXMucmVkdWNlKChzdW0sIHYpID0+IHN1bSArIHYsIDApIC8gdmFsdWVzLmxlbmd0aFxuICAgIFxuICAgIGNvbnN0IHRvdGFsVmFyaWF0aW9uID0gdmFsdWVzLnJlZHVjZSgoc3VtLCB2KSA9PiBzdW0gKyBNYXRoLnBvdyh2IC0gbWVhbiwgMiksIDApXG4gICAgY29uc3QgdHJlbmQgPSB0aGlzLmNhbGN1bGF0ZVRyZW5kTGluZSh2YWx1ZXMpXG4gICAgY29uc3QgZXhwbGFpbmVkVmFyaWF0aW9uID0gdmFsdWVzLnJlZHVjZSgoc3VtLCB2LCBpKSA9PiBzdW0gKyBNYXRoLnBvdyh0cmVuZFtpXSAtIG1lYW4sIDIpLCAwKVxuICAgIFxuICAgIGNvbnN0IHJTcXVhcmVkID0gZXhwbGFpbmVkVmFyaWF0aW9uIC8gdG90YWxWYXJpYXRpb25cbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoclNxdWFyZWQsIDAuMSksIDAuOTUpIC8vIEJvdW5kZWQgY29uZmlkZW5jZVxuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVUcmVuZExpbmUodmFsdWVzOiBudW1iZXJbXSk6IG51bWJlcltdIHtcbiAgICBjb25zdCBuID0gdmFsdWVzLmxlbmd0aFxuICAgIGNvbnN0IHN1bVggPSAobiAqIChuIC0gMSkpIC8gMlxuICAgIGNvbnN0IHN1bVkgPSB2YWx1ZXMucmVkdWNlKChzdW0sIHYpID0+IHN1bSArIHYsIDApXG4gICAgY29uc3Qgc3VtWFkgPSB2YWx1ZXMucmVkdWNlKChzdW0sIHYsIGkpID0+IHN1bSArIGkgKiB2LCAwKVxuICAgIGNvbnN0IHN1bVhYID0gKG4gKiAobiAtIDEpICogKDIgKiBuIC0gMSkpIC8gNlxuICAgIFxuICAgIGNvbnN0IHNsb3BlID0gKG4gKiBzdW1YWSAtIHN1bVggKiBzdW1ZKSAvIChuICogc3VtWFggLSBzdW1YICogc3VtWClcbiAgICBjb25zdCBpbnRlcmNlcHQgPSAoc3VtWSAtIHNsb3BlICogc3VtWCkgLyBuXG4gICAgXG4gICAgcmV0dXJuIHZhbHVlcy5tYXAoKF8sIGkpID0+IHNsb3BlICogaSArIGludGVyY2VwdClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBSURBTCJdLCJuYW1lcyI6WyJCYXNlREFMIiwiQUlEQUwiLCJzdG9yZUNoYXRNZXNzYWdlIiwibWVzc2FnZSIsImV4ZWN1dGVRdWVyeSIsImNsaWVudCIsImRhdGEiLCJlcnJvciIsImZyb20iLCJpbnNlcnQiLCJzZWxlY3QiLCJzaW5nbGUiLCJnZXRDaGF0SGlzdG9yeSIsImNvbnZlcnNhdGlvbklkIiwibGltaXQiLCJjYWNoZUtleSIsImVxIiwib3JkZXIiLCJhc2NlbmRpbmciLCJnZW5lcmF0ZUluc2lnaHRzIiwicGFyYW1zIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbnRleHRRdWVyeSIsImJ1aWxkQ29udGV4dFF1ZXJ5IiwiY29udGV4dERhdGEiLCJjb250ZXh0RXJyb3IiLCJycGMiLCJhbmFseXNpc190eXBlIiwiYW5hbHlzaXNUeXBlIiwiZmlsdGVycyIsInRpbWVmcmFtZSIsImluc2lnaHRzIiwiZ2VuZXJhdGVSdWxlQmFzZWRJbnNpZ2h0cyIsInN0b3JlRXJyb3IiLCJtYXAiLCJpbnNpZ2h0IiwiY3JlYXRlZF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImFuYWx5c2lzX3BhcmFtcyIsImNvbnNvbGUiLCJ3YXJuIiwiZ2V0UmVjb21tZW5kYXRpb25zIiwic2VjdGlvbiIsInVzZXJDb250ZXh0IiwicGVyZm9ybWFuY2VEYXRhIiwicGVyZkVycm9yIiwidXNlcl9jb250ZXh0IiwicmVjb21tZW5kYXRpb25zIiwiZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMiLCJzZW1hbnRpY1NlYXJjaCIsInF1ZXJ5Iiwic2VhcmNoX3F1ZXJ5IiwiZGV0ZWN0QW5vbWFsaWVzIiwibWV0cmljIiwic2Vuc2l0aXZpdHkiLCJtZXRyaWNfbmFtZSIsInRpbWVfd2luZG93Iiwic2Vuc2l0aXZpdHlfdGhyZXNob2xkIiwiZ2VuZXJhdGVQcmVkaWN0aW9ucyIsIm1ldHJpY3MiLCJmb3JlY2FzdERheXMiLCJqb2luIiwicHJlZGljdGlvbnMiLCJoaXN0b3JpY2FsRGF0YSIsImZvcmVjYXN0IiwiZ2VuZXJhdGVMaW5lYXJGb3JlY2FzdCIsInB1c2giLCJjb25maWRlbmNlIiwiY2FsY3VsYXRlRm9yZWNhc3RDb25maWRlbmNlIiwicHJvY2Vzc05hdHVyYWxMYW5ndWFnZVF1ZXJ5IiwiY29udGV4dCIsImludGVudCIsInBhcnNlUXVlcnlJbnRlbnQiLCJyZXNwb25zZSIsInR5cGUiLCJoYW5kbGVEYXRhUmVxdWVzdCIsImhhbmRsZUFuYWx5c2lzUmVxdWVzdCIsImhhbmRsZUNvbXBhcmlzb25SZXF1ZXN0IiwiaGFuZGxlR2VuZXJhbFF1ZXJ5IiwiYmFzZVF1ZXJ5IiwiT2JqZWN0IiwiZW50cmllcyIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsInJlY2VudFdlZWsiLCJzbGljZSIsInByZXZpb3VzV2VlayIsInJlY2VudEF2ZyIsInJlZHVjZSIsInN1bSIsImQiLCJyZXZlbnVlIiwicHJldmlvdXNBdmciLCJjaGFuZ2VQZXJjZW50IiwiaWQiLCJub3ciLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiTWF0aCIsImFicyIsInRvRml4ZWQiLCJtaW4iLCJwcmlvcml0eSIsImNhdGVnb3J5IiwicmV2ZW51ZXMiLCJtZWFuIiwiciIsInN0ZERldiIsInNxcnQiLCJwb3ciLCJwb2ludCIsImluZGV4IiwielNjb3JlIiwiZGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwiaW1wYWN0IiwiZWZmb3J0IiwiZXN0aW1hdGVkSW1wcm92ZW1lbnQiLCJ0aW1lbGluZSIsImxvd2VyY2FzZVF1ZXJ5IiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImVudGl0aWVzIiwicGFyYW1ldGVycyIsInN1Z2dlc3Rpb25zIiwiZGF5cyIsInBvaW50cyIsImkiLCJ4IiwieSIsIm4iLCJzdW1YIiwicCIsInN1bVkiLCJzdW1YWSIsInN1bVhYIiwic2xvcGUiLCJpbnRlcmNlcHQiLCJkYXkiLCJwcmVkaWN0ZWRfdmFsdWUiLCJtYXgiLCJ2YWx1ZXMiLCJzYWxlcyIsInYiLCJ0b3RhbFZhcmlhdGlvbiIsInRyZW5kIiwiY2FsY3VsYXRlVHJlbmRMaW5lIiwiZXhwbGFpbmVkVmFyaWF0aW9uIiwiclNxdWFyZWQiLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/dal/ai.ts\n");

/***/ }),

/***/ "(rsc)/./lib/dal/base.ts":
/*!*************************!*\
  !*** ./lib/dal/base.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Base Data Access Layer for Scout Dashboard\n * Provides centralized database operations with error handling and caching\n */ \nclass BaseDAL {\n    constructor(){\n        this.cache = new Map();\n        this.client = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY, {\n            auth: {\n                persistSession: false,\n                autoRefreshToken: false\n            },\n            db: {\n                schema: 'public'\n            }\n        });\n    }\n    /**\n   * Get Supabase client instance\n   */ getClient() {\n        return this.client;\n    }\n    /**\n   * Execute query with error handling and optional caching\n   */ async executeQuery(queryFn, cacheKey, cacheTTL = 300000 // 5 minutes default\n    ) {\n        try {\n            // Check cache first if cache key provided\n            if (cacheKey) {\n                const cached = this.cache.get(cacheKey);\n                if (cached && Date.now() - cached.timestamp < cached.ttl) {\n                    return {\n                        data: cached.data,\n                        error: null\n                    };\n                }\n            }\n            const { data, error } = await queryFn(this.client);\n            if (error) {\n                console.error('Database query error:', error);\n                return {\n                    data: null,\n                    error: error.message\n                };\n            }\n            // Cache successful result if cache key provided\n            if (cacheKey && data) {\n                this.cache.set(cacheKey, {\n                    data,\n                    timestamp: Date.now(),\n                    ttl: cacheTTL\n                });\n            }\n            return {\n                data,\n                error: null\n            };\n        } catch (err) {\n            const error = err;\n            console.error('Database execution error:', error);\n            return {\n                data: null,\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Clear cache by key or all cache\n   */ clearCache(key) {\n        if (key) {\n            this.cache.delete(key);\n        } else {\n            this.cache.clear();\n        }\n    }\n    /**\n   * Build dynamic filters for queries\n   */ buildFilters(filters) {\n        const cleanFilters = {};\n        Object.entries(filters).forEach(([key, value])=>{\n            if (value !== undefined && value !== null && value !== '') {\n                if (Array.isArray(value) && value.length > 0) {\n                    cleanFilters[key] = value;\n                } else if (!Array.isArray(value)) {\n                    cleanFilters[key] = value;\n                }\n            }\n        });\n        return cleanFilters;\n    }\n    /**\n   * Execute raw SQL query (for complex analytics)\n   */ async executeRawQuery(query, params = [], cacheKey, cacheTTL = 300000) {\n        return this.executeQuery(async (client)=>{\n            const { data, error } = await client.rpc('execute_sql', {\n                query_text: query,\n                params: params\n            });\n            return {\n                data,\n                error\n            };\n        }, cacheKey, cacheTTL);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BaseDAL);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/dal/base.ts\n");

/***/ }),

/***/ "(rsc)/./lib/dal/transactions.ts":
/*!*********************************!*\
  !*** ./lib/dal/transactions.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(rsc)/./lib/dal/base.ts\");\n/**\n * Transaction Data Access Layer\n * Handles all transaction-related database operations\n */ \nclass TransactionDAL extends _base__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n   * Get daily transaction trends with optional filters\n   */ async getTrends(filters = {}) {\n        const cacheKey = `trends_${JSON.stringify(filters)}`;\n        return this.executeQuery(async (client)=>{\n            let query = client.from('v_trends_daily').select('day, tx_count, sales, avg_transaction').order('day', {\n                ascending: true\n            });\n            // Apply date filters\n            if (filters.dateFrom) {\n                query = query.gte('day', filters.dateFrom);\n            }\n            if (filters.dateTo) {\n                query = query.lte('day', filters.dateTo);\n            }\n            const { data, error } = await query;\n            return {\n                data,\n                error\n            };\n        }, cacheKey, 300000 // 5 minutes cache\n        );\n    }\n    /**\n   * Get consumer behavior patterns\n   */ async getBehaviorData(filters = {}) {\n        const cacheKey = `behavior_${JSON.stringify(filters)}`;\n        return this.executeQuery(async (client)=>{\n            let query = client.from('v_behavior_patterns').select('request_type, n, acceptance_rate').order('n', {\n                ascending: false\n            });\n            // Apply filters if needed\n            if (filters.dateFrom) {\n                query = query.gte('created_at', filters.dateFrom);\n            }\n            if (filters.dateTo) {\n                query = query.lte('created_at', filters.dateTo);\n            }\n            const { data, error } = await query;\n            return {\n                data,\n                error\n            };\n        }, cacheKey, 600000 // 10 minutes cache\n        );\n    }\n    /**\n   * Get product mix analysis\n   */ async getProductMix(filters = {}) {\n        const cacheKey = `product_mix_${JSON.stringify(filters)}`;\n        return this.executeQuery(async (client)=>{\n            let query = client.from('v_product_mix').select('product_category, brand_name, n, total_sales').order('total_sales', {\n                ascending: false\n            });\n            // Apply filters\n            if (filters.categories?.length) {\n                query = query.in('product_category', filters.categories);\n            }\n            if (filters.brands?.length) {\n                query = query.in('brand_name', filters.brands);\n            }\n            if (filters.dateFrom) {\n                query = query.gte('created_at', filters.dateFrom);\n            }\n            if (filters.dateTo) {\n                query = query.lte('created_at', filters.dateTo);\n            }\n            const { data, error } = await query;\n            return {\n                data,\n                error\n            };\n        }, cacheKey, 300000 // 5 minutes cache\n        );\n    }\n    /**\n   * Get consumer profiling data\n   */ async getProfiling(filters = {}) {\n        const cacheKey = `profiling_${JSON.stringify(filters)}`;\n        return this.executeQuery(async (client)=>{\n            let query = client.from('v_consumer_profiling').select('gender, age_bracket, n, avg_spend').order('n', {\n                ascending: false\n            });\n            // Apply filters\n            if (filters.genders?.length) {\n                query = query.in('gender', filters.genders);\n            }\n            if (filters.ageBrackets?.length) {\n                query = query.in('age_bracket', filters.ageBrackets);\n            }\n            if (filters.dateFrom) {\n                query = query.gte('created_at', filters.dateFrom);\n            }\n            if (filters.dateTo) {\n                query = query.lte('created_at', filters.dateTo);\n            }\n            const { data, error } = await query;\n            return {\n                data,\n                error\n            };\n        }, cacheKey, 600000 // 10 minutes cache\n        );\n    }\n    /**\n   * Get geographic distribution data\n   */ async getGeoData(filters = {}) {\n        const cacheKey = `geo_${JSON.stringify(filters)}`;\n        return this.executeQuery(async (client)=>{\n            let query = client.from('v_geo_province').select('province, tx_count, sales, avg_transaction, region_name, province_code').order('tx_count', {\n                ascending: false\n            });\n            // Apply filters\n            if (filters.regions?.length) {\n                query = query.in('region_name', filters.regions);\n            }\n            if (filters.provinces?.length) {\n                query = query.in('province', filters.provinces);\n            }\n            if (filters.dateFrom) {\n                query = query.gte('created_at', filters.dateFrom);\n            }\n            if (filters.dateTo) {\n                query = query.lte('created_at', filters.dateTo);\n            }\n            const { data, error } = await query;\n            return {\n                data,\n                error\n            };\n        }, cacheKey, 300000 // 5 minutes cache\n        );\n    }\n    /**\n   * Get time-based heatmap data\n   */ async getTimeHeatmap(filters = {}) {\n        const cacheKey = `time_heatmap_${JSON.stringify(filters)}`;\n        return this.executeQuery(async (client)=>{\n            let query = client.from('v_time_heatmap').select('time_of_day, day_of_week, tx_count, avg_value').order('day_of_week', {\n                ascending: true\n            }).order('time_of_day', {\n                ascending: true\n            });\n            // Apply date filters\n            if (filters.dateFrom) {\n                query = query.gte('created_at', filters.dateFrom);\n            }\n            if (filters.dateTo) {\n                query = query.lte('created_at', filters.dateTo);\n            }\n            const { data, error } = await query;\n            return {\n                data,\n                error\n            };\n        }, cacheKey, 600000 // 10 minutes cache\n        );\n    }\n    /**\n   * Get competitive analysis data\n   */ async getCompetitiveData(filters = {}) {\n        const cacheKey = `competitive_${JSON.stringify(filters)}`;\n        return this.executeQuery(async (client)=>{\n            let query = client.from('v_competitive_analysis').select(`\n            brand_name, \n            product_category, \n            market_share, \n            total_revenue, \n            avg_price_point, \n            acceptance_rate,\n            is_tbwa_client,\n            tier_classification\n          `).order('market_share', {\n                ascending: false\n            });\n            // Apply filters\n            if (filters.categories?.length) {\n                query = query.in('product_category', filters.categories);\n            }\n            if (filters.brands?.length) {\n                query = query.in('brand_name', filters.brands);\n            }\n            if (filters.dateFrom) {\n                query = query.gte('created_at', filters.dateFrom);\n            }\n            if (filters.dateTo) {\n                query = query.lte('created_at', filters.dateTo);\n            }\n            const { data, error } = await query;\n            return {\n                data,\n                error\n            };\n        }, cacheKey, 600000 // 10 minutes cache\n        );\n    }\n    /**\n   * Get advanced analytics with custom SQL\n   */ async getAdvancedAnalytics(analysisType, params = {}) {\n        const cacheKey = `advanced_${analysisType}_${JSON.stringify(params)}`;\n        const queries = {\n            cohort: `\n        WITH cohorts AS (\n          SELECT \n            DATE_TRUNC('month', timestamp::date) as cohort_month,\n            store_id,\n            COUNT(*) as tx_count,\n            AVG(peso_value) as avg_spend\n          FROM transactions \n          WHERE timestamp >= $1 AND timestamp <= $2\n          GROUP BY cohort_month, store_id\n        )\n        SELECT * FROM cohorts ORDER BY cohort_month\n      `,\n            funnel: `\n        SELECT \n          'awareness' as stage, COUNT(DISTINCT store_id) as count\n        FROM transactions WHERE campaign_influenced = true\n        UNION ALL\n        SELECT \n          'consideration' as stage, COUNT(DISTINCT store_id) as count\n        FROM transactions WHERE request_type != 'indirect'\n        UNION ALL\n        SELECT \n          'purchase' as stage, COUNT(DISTINCT store_id) as count\n        FROM transactions WHERE peso_value > 0\n      `,\n            retention: `\n        WITH user_activity AS (\n          SELECT \n            store_id,\n            DATE_TRUNC('month', timestamp::date) as activity_month,\n            COUNT(*) as tx_count\n          FROM transactions \n          WHERE timestamp >= $1 AND timestamp <= $2\n          GROUP BY store_id, activity_month\n        )\n        SELECT \n          activity_month,\n          COUNT(DISTINCT store_id) as active_stores,\n          AVG(tx_count) as avg_transactions\n        FROM user_activity\n        GROUP BY activity_month\n        ORDER BY activity_month\n      `,\n            attribution: `\n        SELECT \n          CASE WHEN campaign_influenced THEN 'Campaign' ELSE 'Organic' END as source,\n          COUNT(*) as transactions,\n          SUM(peso_value) as revenue,\n          AVG(peso_value) as avg_order_value\n        FROM transactions \n        WHERE timestamp >= $1 AND timestamp <= $2\n        GROUP BY campaign_influenced\n      `\n        };\n        const query = queries[analysisType];\n        if (!query) {\n            return {\n                data: null,\n                error: 'Invalid analysis type'\n            };\n        }\n        return this.executeRawQuery(query, [\n            params.dateFrom || '2024-01-01',\n            params.dateTo || '2024-12-31'\n        ], cacheKey, 900000 // 15 minutes cache\n        );\n    }\n    /**\n   * Invalidate all transaction-related caches\n   */ invalidateCache() {\n        this.clearCache();\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TransactionDAL);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/dal/transactions.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/analytics.ts":
/*!***********************************!*\
  !*** ./lib/services/analytics.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_dal_transactions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/dal/transactions */ \"(rsc)/./lib/dal/transactions.ts\");\n/* harmony import */ var _lib_dal_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/dal/ai */ \"(rsc)/./lib/dal/ai.ts\");\n/**\n * Analytics Service Layer\n * Orchestrates DAL operations and business logic for analytics\n */ \n\nclass AnalyticsService {\n    constructor(options = {}){\n        this.transactionDAL = new _lib_dal_transactions__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this.aiDAL = new _lib_dal_ai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        this.options = {\n            enableCaching: true,\n            enableAI: true,\n            defaultCacheTTL: 300000,\n            ...options\n        };\n    }\n    /**\n   * Get comprehensive dashboard data for a specific view\n   */ async getDashboardData(section, filters = {}, includeAI = true) {\n        try {\n            let dashboardData = {};\n            let insights = [];\n            let recommendations = [];\n            // Get section-specific data\n            switch(section){\n                case 'transaction-trends':\n                    const { data: trendsData, error: trendsError } = await this.transactionDAL.getTrends(filters);\n                    if (trendsError) throw new Error(trendsError);\n                    dashboardData.trends = trendsData;\n                    break;\n                case 'product-mix':\n                    const { data: productData, error: productError } = await this.transactionDAL.getProductMix(filters);\n                    if (productError) throw new Error(productError);\n                    dashboardData.productMix = productData;\n                    break;\n                case 'consumer-behavior':\n                    const { data: behaviorData, error: behaviorError } = await this.transactionDAL.getBehaviorData(filters);\n                    if (behaviorError) throw new Error(behaviorError);\n                    dashboardData.behavior = behaviorData;\n                    break;\n                case 'consumer-profiling':\n                    const { data: profilingData, error: profilingError } = await this.transactionDAL.getProfiling(filters);\n                    if (profilingError) throw new Error(profilingError);\n                    dashboardData.profiling = profilingData;\n                    break;\n                case 'geographical-intelligence':\n                    const { data: geoData, error: geoError } = await this.transactionDAL.getGeoData(filters);\n                    if (geoError) throw new Error(geoError);\n                    dashboardData.geo = geoData;\n                    break;\n                case 'competitive-analysis':\n                    const { data: competitiveData, error: competitiveError } = await this.transactionDAL.getCompetitiveData(filters);\n                    if (competitiveError) throw new Error(competitiveError);\n                    dashboardData.competitive = competitiveData;\n                    break;\n                default:\n                    // Get overview data for general dashboard\n                    const [trendsResult, behaviorResult, geoResult] = await Promise.all([\n                        this.transactionDAL.getTrends(filters),\n                        this.transactionDAL.getBehaviorData(filters),\n                        this.transactionDAL.getGeoData(filters)\n                    ]);\n                    dashboardData = {\n                        trends: trendsResult.data,\n                        behavior: behaviorResult.data,\n                        geo: geoResult.data\n                    };\n            }\n            // Get AI insights and recommendations if enabled\n            if (includeAI && this.options.enableAI) {\n                const [insightsResult, recommendationsResult] = await Promise.all([\n                    this.aiDAL.generateInsights({\n                        context: section,\n                        filters,\n                        analysisType: 'trends',\n                        timeframe: '30d'\n                    }),\n                    this.aiDAL.getRecommendations(section, {\n                        filters\n                    })\n                ]);\n                insights = insightsResult.data || [];\n                recommendations = recommendationsResult.data || [];\n            }\n            return {\n                data: dashboardData,\n                insights,\n                recommendations\n            };\n        } catch (error) {\n            return {\n                data: null,\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Get time-based heatmap data with insights\n   */ async getTimeAnalysis(filters = {}) {\n        try {\n            const { data: heatmapData, error } = await this.transactionDAL.getTimeHeatmap(filters);\n            if (error) throw new Error(error);\n            // Generate time-based insights\n            const insights = await this.generateTimeInsights(heatmapData || []);\n            return {\n                heatmap: heatmapData,\n                insights\n            };\n        } catch (error) {\n            return {\n                heatmap: null,\n                insights: [],\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Perform advanced analytics\n   */ async getAdvancedAnalytics(analysisType, params = {}) {\n        try {\n            const { data, error } = await this.transactionDAL.getAdvancedAnalytics(analysisType, params);\n            if (error) throw new Error(error);\n            // Generate insights from advanced analytics\n            const insights = await this.generateAdvancedInsights(analysisType, data || []);\n            return {\n                data,\n                insights\n            };\n        } catch (error) {\n            return {\n                data: null,\n                insights: [],\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Chat interface for natural language queries\n   */ async processChatMessage(message, conversationId, context = {}) {\n        try {\n            // Store user message\n            const userMessage = {\n                id: `msg_${Date.now()}_user`,\n                conversation_id: conversationId,\n                role: 'user',\n                content: message,\n                context: context.dashboardState?.section || 'general',\n                filters: context.dashboardState?.filters,\n                created_at: new Date().toISOString()\n            };\n            await this.aiDAL.storeChatMessage(userMessage);\n            // Process natural language query\n            const fullContext = {\n                conversationId,\n                userContext: context.userContext,\n                dashboardState: context.dashboardState,\n                previousMessages: context.previousMessages\n            };\n            const { data: response, error } = await this.aiDAL.processNaturalLanguageQuery(message, fullContext);\n            if (error) throw new Error(error);\n            // Generate AI response\n            const assistantMessage = {\n                id: `msg_${Date.now()}_assistant`,\n                conversation_id: conversationId,\n                role: 'assistant',\n                content: response.message || this.generateContextualResponse(message, context),\n                context: context.dashboardState?.section || 'general',\n                created_at: new Date().toISOString()\n            };\n            // Store assistant response\n            await this.aiDAL.storeChatMessage(assistantMessage);\n            return {\n                response: assistantMessage,\n                suggestions: this.generateSuggestions(message, context),\n                actions: response.actions\n            };\n        } catch (error) {\n            return {\n                response: {\n                    id: `msg_${Date.now()}_error`,\n                    conversation_id: conversationId,\n                    role: 'assistant',\n                    content: 'I encountered an error processing your request. Please try again.',\n                    created_at: new Date().toISOString()\n                },\n                suggestions: [\n                    'Try a different question',\n                    'Check your filters',\n                    'Refresh the page'\n                ],\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Get AI-powered insights for specific metrics\n   */ async getAIInsights(params) {\n        try {\n            const { data: insights, error } = await this.aiDAL.generateInsights(params);\n            if (error) throw new Error(error);\n            return {\n                insights: insights || []\n            };\n        } catch (error) {\n            return {\n                insights: [],\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Detect anomalies in business metrics\n   */ async detectAnomalies(metric = 'sales', timeframe = '7d') {\n        try {\n            const { data: anomalies, error } = await this.aiDAL.detectAnomalies(metric, timeframe);\n            if (error) throw new Error(error);\n            // Generate insights from anomalies\n            const insights = await this.generateAnomalyInsights(anomalies || []);\n            return {\n                anomalies: anomalies || [],\n                insights\n            };\n        } catch (error) {\n            return {\n                anomalies: [],\n                insights: [],\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Get predictions for business metrics\n   */ async getPredictions(metrics = [\n        'sales',\n        'transactions'\n    ], days = 30) {\n        try {\n            const { data: predictions, error } = await this.aiDAL.generatePredictions(metrics, days);\n            if (error) throw new Error(error);\n            // Generate insights from predictions\n            const insights = await this.generatePredictionInsights(predictions || []);\n            return {\n                predictions: predictions || [],\n                insights\n            };\n        } catch (error) {\n            return {\n                predictions: [],\n                insights: [],\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Semantic search across analytics data\n   */ async semanticSearch(query, filters = {}) {\n        try {\n            const { data: results, error } = await this.aiDAL.semanticSearch(query, filters);\n            if (error) throw new Error(error);\n            return {\n                results: results || []\n            };\n        } catch (error) {\n            return {\n                results: [],\n                error: error.message\n            };\n        }\n    }\n    // Private helper methods\n    async generateTimeInsights(heatmapData) {\n        const insights = [];\n        if (heatmapData.length === 0) return insights;\n        // Find peak hours\n        const maxTx = Math.max(...heatmapData.map((d)=>d.tx_count));\n        const peakHours = heatmapData.filter((d)=>d.tx_count === maxTx);\n        if (peakHours.length > 0) {\n            insights.push({\n                id: `time_peak_${Date.now()}`,\n                type: 'trend',\n                title: 'Peak Performance Hours Identified',\n                description: `Highest transaction volume occurs during ${peakHours.map((h)=>h.time_of_day).join(', ')}`,\n                confidence: 0.9,\n                priority: 'medium',\n                category: 'operational',\n                recommendations: [\n                    'Schedule more staff during peak hours',\n                    'Plan promotional activities during high-traffic periods'\n                ],\n                created_at: new Date().toISOString()\n            });\n        }\n        return insights;\n    }\n    async generateAdvancedInsights(type, data) {\n        const insights = [];\n        switch(type){\n            case 'retention':\n                if (data.length > 0) {\n                    const avgRetention = data.reduce((sum, d)=>sum + d.active_stores, 0) / data.length;\n                    insights.push({\n                        id: `retention_${Date.now()}`,\n                        type: 'trend',\n                        title: 'Store Retention Analysis',\n                        description: `Average store retention is ${avgRetention.toFixed(1)} stores per month`,\n                        confidence: 0.8,\n                        priority: 'medium',\n                        category: 'operational',\n                        created_at: new Date().toISOString()\n                    });\n                }\n                break;\n            case 'attribution':\n                if (data.length > 0) {\n                    const campaignData = data.find((d)=>d.source === 'Campaign');\n                    const organicData = data.find((d)=>d.source === 'Organic');\n                    if (campaignData && organicData) {\n                        const campaignROI = campaignData.revenue / campaignData.transactions / (organicData.revenue / organicData.transactions);\n                        insights.push({\n                            id: `attribution_${Date.now()}`,\n                            type: 'prediction',\n                            title: 'Campaign Attribution Impact',\n                            description: `Campaign-influenced transactions have ${campaignROI.toFixed(1)}x higher value than organic`,\n                            confidence: 0.85,\n                            priority: 'high',\n                            category: 'marketing',\n                            created_at: new Date().toISOString()\n                        });\n                    }\n                }\n                break;\n        }\n        return insights;\n    }\n    async generateAnomalyInsights(anomalies) {\n        return anomalies.map((anomaly)=>({\n                id: `anomaly_insight_${Date.now()}_${anomaly.id || Math.random()}`,\n                type: 'anomaly',\n                title: `${anomaly.metric} Anomaly Detected`,\n                description: `Unusual ${anomaly.metric} value detected: ${anomaly.value}`,\n                confidence: 0.8,\n                priority: anomaly.severity === 'high' ? 'high' : 'medium',\n                category: 'operational',\n                recommendations: [\n                    'Investigate potential causes',\n                    'Check data quality',\n                    'Monitor for trend continuation'\n                ],\n                created_at: new Date().toISOString()\n            }));\n    }\n    async generatePredictionInsights(predictions) {\n        return predictions.map((prediction)=>({\n                id: `prediction_insight_${Date.now()}_${prediction.metric}`,\n                type: 'prediction',\n                title: `${prediction.metric} Forecast Generated`,\n                description: `30-day forecast shows ${prediction.forecast.length} data points with ${(prediction.confidence * 100).toFixed(1)}% confidence`,\n                confidence: prediction.confidence,\n                priority: prediction.confidence > 0.8 ? 'high' : 'medium',\n                category: 'financial',\n                created_at: new Date().toISOString()\n            }));\n    }\n    generateContextualResponse(message, context) {\n        const section = context.dashboardState?.section || 'general';\n        const responses = {\n            'transaction-trends': 'I can help you analyze transaction trends. What specific time period or metric interests you?',\n            'product-mix': 'I can analyze your product performance data. Which categories or brands would you like to explore?',\n            'consumer-behavior': 'I can provide insights into consumer behavior patterns. What aspect of customer behavior are you curious about?',\n            'geographical-intelligence': 'I can help with geographic performance analysis. Which regions or provinces are you interested in?',\n            'competitive-analysis': 'I can analyze competitive positioning and market share. What competitors or categories should we focus on?',\n            'general': 'I can help you explore your analytics data. What would you like to learn about your business performance?'\n        };\n        return responses[section] || responses.general;\n    }\n    generateSuggestions(message, context) {\n        const section = context.dashboardState?.section || 'general';\n        const suggestions = {\n            'transaction-trends': [\n                'Show me sales trends for the last 30 days',\n                'Compare this month vs last month',\n                'What are the peak transaction hours?'\n            ],\n            'product-mix': [\n                'Which products are top performers?',\n                'Show me category performance',\n                'Analyze brand market share'\n            ],\n            'consumer-behavior': [\n                'What are the most common purchase patterns?',\n                'Analyze customer segmentation',\n                'Show conversion funnel data'\n            ],\n            'geographical-intelligence': [\n                'Which regions perform best?',\n                'Compare provincial sales',\n                'Show geographic distribution'\n            ],\n            'competitive-analysis': [\n                'Compare competitor performance',\n                'Show market share trends',\n                'Analyze pricing strategies'\n            ],\n            'general': [\n                'Show me key performance indicators',\n                'What are the latest insights?',\n                'Generate a business summary'\n            ]\n        };\n        return suggestions[section] || suggestions.general;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AnalyticsService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/analytics.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/validation.ts":
/*!*********************************!*\
  !*** ./lib/utils/validation.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateAIAnalysisParams: () => (/* binding */ validateAIAnalysisParams),\n/* harmony export */   validateChatMessage: () => (/* binding */ validateChatMessage),\n/* harmony export */   validatePagination: () => (/* binding */ validatePagination),\n/* harmony export */   validateSearchQuery: () => (/* binding */ validateSearchQuery),\n/* harmony export */   validateTransactionFilters: () => (/* binding */ validateTransactionFilters)\n/* harmony export */ });\n/**\n * Validation utilities for Scout Dashboard\n */ /**\n * Validate and sanitize transaction filters\n */ function validateTransactionFilters(filters) {\n    const errors = [];\n    const sanitized = {};\n    // Validate date range\n    if (filters.dateFrom) {\n        const fromDate = new Date(filters.dateFrom);\n        if (isNaN(fromDate.getTime())) {\n            errors.push('Invalid dateFrom format. Use YYYY-MM-DD.');\n        } else {\n            sanitized.dateFrom = fromDate.toISOString().split('T')[0];\n        }\n    }\n    if (filters.dateTo) {\n        const toDate = new Date(filters.dateTo);\n        if (isNaN(toDate.getTime())) {\n            errors.push('Invalid dateTo format. Use YYYY-MM-DD.');\n        } else {\n            sanitized.dateTo = toDate.toISOString().split('T')[0];\n        }\n    }\n    // Validate date range logic\n    if (sanitized.dateFrom && sanitized.dateTo && sanitized.dateFrom > sanitized.dateTo) {\n        errors.push('dateFrom cannot be after dateTo.');\n    }\n    // Validate array filters\n    const arrayFields = [\n        'regions',\n        'provinces',\n        'stores',\n        'brands',\n        'categories',\n        'genders',\n        'ageBrackets'\n    ];\n    arrayFields.forEach((field)=>{\n        if (filters[field]) {\n            if (Array.isArray(filters[field])) {\n                const filtered = filters[field].filter((item)=>typeof item === 'string' && item.trim().length > 0);\n                if (filtered.length > 0) {\n                    sanitized[field] = filtered;\n                }\n            } else if (typeof filters[field] === 'string') {\n                const items = filters[field].split(',').map((item)=>item.trim()).filter(Boolean);\n                if (items.length > 0) {\n                    sanitized[field] = items;\n                }\n            }\n        }\n    });\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized\n    };\n}\n/**\n * Validate chat message input\n */ function validateChatMessage(data) {\n    const errors = [];\n    if (!data.message || typeof data.message !== 'string') {\n        errors.push('Message is required and must be a string.');\n    } else if (data.message.trim().length === 0) {\n        errors.push('Message cannot be empty.');\n    } else if (data.message.length > 1000) {\n        errors.push('Message cannot exceed 1000 characters.');\n    }\n    if (data.conversationId && typeof data.conversationId !== 'string') {\n        errors.push('Conversation ID must be a string.');\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: {\n            message: data.message?.trim(),\n            conversationId: data.conversationId || null,\n            context: data.context || 'general',\n            filters: data.filters || {}\n        }\n    };\n}\n/**\n * Validate AI analysis parameters\n */ function validateAIAnalysisParams(params) {\n    const errors = [];\n    const validAnalysisTypes = [\n        'trends',\n        'anomalies',\n        'predictions',\n        'recommendations'\n    ];\n    if (!params.analysisType || !validAnalysisTypes.includes(params.analysisType)) {\n        errors.push(`Analysis type must be one of: ${validAnalysisTypes.join(', ')}.`);\n    }\n    if (params.confidenceThreshold !== undefined) {\n        const confidence = parseFloat(params.confidenceThreshold);\n        if (isNaN(confidence) || confidence < 0 || confidence > 1) {\n            errors.push('Confidence threshold must be a number between 0 and 1.');\n        } else {\n            params.confidenceThreshold = confidence;\n        }\n    }\n    if (params.timeframe && typeof params.timeframe !== 'string') {\n        errors.push('Timeframe must be a string (e.g., \"30d\", \"7d\").');\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: params\n    };\n}\n/**\n * Validate pagination parameters\n */ function validatePagination(params) {\n    const errors = [];\n    const sanitized = {};\n    if (params.limit !== undefined) {\n        const limit = parseInt(params.limit, 10);\n        if (isNaN(limit) || limit < 1 || limit > 1000) {\n            errors.push('Limit must be a number between 1 and 1000.');\n        } else {\n            sanitized.limit = limit;\n        }\n    }\n    if (params.offset !== undefined) {\n        const offset = parseInt(params.offset, 10);\n        if (isNaN(offset) || offset < 0) {\n            errors.push('Offset must be a non-negative number.');\n        } else {\n            sanitized.offset = offset;\n        }\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized\n    };\n}\n/**\n * Sanitize and validate search query\n */ function validateSearchQuery(query) {\n    const errors = [];\n    if (typeof query !== 'string') {\n        errors.push('Search query must be a string.');\n        return {\n            isValid: false,\n            errors\n        };\n    }\n    const sanitized = query.trim();\n    if (sanitized.length === 0) {\n        errors.push('Search query cannot be empty.');\n    } else if (sanitized.length > 200) {\n        errors.push('Search query cannot exceed 200 characters.');\n    }\n    // Check for potential SQL injection patterns\n    const suspiciousPatterns = /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|EXEC)\\b)|[;'\"\\\\]/i;\n    if (suspiciousPatterns.test(sanitized)) {\n        errors.push('Search query contains invalid characters.');\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/validation.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@15.0.0-rc.0_react-dom@19.1.1_react@19.1.1__react@19.1.1"], () => (__webpack_exec__("(rsc)/./node_modules/.pnpm/next@15.0.0-rc.0_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fscout%2Ftrends%2Froute&page=%2Fapi%2Fscout%2Ftrends%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fscout%2Ftrends%2Froute.ts&appDir=%2FUsers%2Ftbwa%2Fscout-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftbwa%2Fscout-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();